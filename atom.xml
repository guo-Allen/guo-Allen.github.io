<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Allen&#39;s Blog</title>
  <subtitle>(*@ο@*) 哇～) 好大坨knowledge</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-29T16:36:54.644Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>郭恒开</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式总结</title>
    <link href="http://yoursite.com/2019/08/15/regExp/"/>
    <id>http://yoursite.com/2019/08/15/regExp/</id>
    <published>2019-08-14T16:00:00.000Z</published>
    <updated>2020-07-29T16:36:54.644Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。</p>
<ul>
<li>用在前端，就一句话：匹配字符串。</li>
</ul>
</blockquote>
<a id="more"></a>
<h4 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h4><ul>
<li>对象创建：new regExp()</li>
<li>字面量创建： / /</li>
</ul>
<h4 id="测试正则表达式"><a href="#测试正则表达式" class="headerlink" title="测试正则表达式"></a>测试正则表达式</h4><ul>
<li>test方法</li>
</ul>
<h4 id="正则表达式中的特殊字符"><a href="#正则表达式中的特殊字符" class="headerlink" title="正则表达式中的特殊字符"></a>正则表达式中的特殊字符</h4><ul>
<li><p>边界符</p>
<ul>
<li>^ 匹配开始</li>
<li>\$ 匹配结尾</li>
</ul>
</li>
<li><p>字符类</p>
<ul>
<li>[] 匹配其中一个</li>
<li>注意：方括号内部加上^表示取反，只要包含方括号内的字符，都返回 false</li>
</ul>
</li>
<li><p>量词符</p>
<ul>
<li>* 重复0次或更多次 【&gt;=0 次】</li>
<li>+ 重复1次或更多次 【&gt;=1 次】</li>
<li>?  重复0次或1次</li>
<li>{n} 重复n次</li>
<li>{n,} 重复n次到更多次</li>
<li>{n,m} 重复n次到m次</li>
<li>注意：方括号内部加上^表示取反，只要包含方括号内的字符，都返回 false</li>
</ul>
</li>
<li><p>预定义类</p>
<ul>
<li>\d \D 数字</li>
<li>\w \W 数字字符下划线</li>
<li>\s \S 换行符，空格，制表符</li>
</ul>
</li>
</ul>
<h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><ul>
<li>g 全局替换</li>
<li>i 忽略大小写</li>
<li>gi</li>
</ul>
<h4 id="简单练习"><a href="#简单练习" class="headerlink" title="简单练习"></a>简单练习</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/abc/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"abcdefg"</span>));  <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/^abcf/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"abcdefg"</span>));  <span class="comment">//false</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/^abcf/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"abcdefg"</span>));  <span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/abc$/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"abecdefg"</span>)); <span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/[abc]/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"abrrecdefg"</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/[a-zA-z]/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"abrrecCdefg"</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/[0-9]/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"9"</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/[^a-z]/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"A"</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/[^a-z]/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"9"</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/[0-9]*/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">""</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/[0-9]+/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"100000000000"</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/[0-9]?/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"100000000000"</span>));<span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/^[0-9]&#123;2&#125;$/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"1000"</span>));<span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/^[0-9]&#123;2,5&#125;$/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"1000000"</span>));<span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/^\w$/</span>;<span class="comment">//word意思，匹配数字、字母、下划线</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"1"</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/^\d$/</span>;<span class="comment">//digital意思，匹配数字</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"1"</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/\s/</span>;<span class="comment">//space意思，匹配空格、制表符、换行符</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"aaaa\nbbbb\tccc"</span>));<span class="comment">//true,换行符：\n,制表符：\t</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/^[\S\s]$/</span>;<span class="comment">//匹配任意字符</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"11"</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="comment">// . 匹配除换行符之外的任何字符</span></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/^.$/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"11"</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="comment">//如果要匹配的字符和正则中的特殊符号冲突，必须加反斜杠进行转义</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/^\[$/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"1[55555]1"</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//或写法与小括号</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(娃哈哈|矿泉水|冰红茶)$/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'娃哈哈'</span>)); <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="comment">//字符串替换：replace,如果要全局替换，正则后面加g，如果忽略大小写，后面加i</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> str=<span class="string">'abcdefghi'</span>;</div><div class="line">str= str.replace(<span class="regexp">/c/gi</span>,<span class="string">"&amp;&amp;&amp;&amp;"</span>);</div><div class="line"><span class="built_in">console</span>.log(str);<span class="comment">//ab&amp;&amp;&amp;&amp;defghi</span></div><div class="line"></div><div class="line"><span class="comment">//替换第一个空格</span></div><div class="line"><span class="keyword">let</span> str=<span class="string">'abcde fghis ndf'</span>;</div><div class="line">str= str.replace(<span class="regexp">/\s&#123;1&#125;/g</span>,<span class="string">"&amp;&amp;&amp;&amp;"</span>);</div><div class="line"><span class="built_in">console</span>.log(str);<span class="comment">//ab&amp;&amp;&amp;&amp;defghi</span></div></pre></td></tr></table></figure>
<h4 id="易错问题"><a href="#易错问题" class="headerlink" title="易错问题"></a>易错问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/[0-,100]/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"99"</span>));<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"9"</span>));<span class="comment">//false</span></div></pre></td></tr></table></figure>
<blockquote>
<p>正则表达式永远匹配的是字符串，上面的含义是：0到1，或者0，或者0</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/^[\S\s]$/</span>;<span class="comment">//匹配任意字符</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">""</span>));<span class="comment">//false</span></div></pre></td></tr></table></figure>
<blockquote>
<p>匹配任意字符，但是你得输入啊</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> reg=<span class="regexp">/^.$/</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"."</span>));<span class="comment">//false</span></div></pre></td></tr></table></figure>
<blockquote>
<p>. 匹配除换行符之外的任何字符,要验证 <strong>.</strong> ，必须加反斜杠转义，或者加中括号。</p>
</blockquote>
<h4 id="常见面试相关"><a href="#常见面试相关" class="headerlink" title="常见面试相关"></a>常见面试相关</h4><blockquote>
<p>正则去空格<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个带空格的字符串</span></div><div class="line"><span class="keyword">let</span> str = <span class="string">'  abcde fgh ijk '</span>;</div><div class="line"><span class="comment">// 匹配开头为空格的多个字符</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"  去掉左空格："</span> + str.replace(<span class="regexp">/^\s*/g</span>, <span class="string">''</span>));</div><div class="line"><span class="comment">// 匹配结尾为空格的多个字符</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"  去掉右空格："</span> + str.replace(<span class="regexp">/\s*$/g</span>, <span class="string">''</span>));</div><div class="line"><span class="comment">// 匹配开头或结尾为空格的多个字符，即左右空格</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"去掉左右空格："</span> + str.replace((<span class="regexp">/^\s*/g</span>|<span class="regexp">/\s*$/g</span>), <span class="string">''</span>));</div><div class="line"><span class="comment">// 不设定位置，匹配全部</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"去掉所有空格："</span> + str.replace(<span class="regexp">/\s*/g</span>, <span class="string">''</span>));</div></pre></td></tr></table></figure></p>
<p> 匹配二进制数字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"10101111"</span>;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[01]+$/g</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(str));</div></pre></td></tr></table></figure></p>
<p>非零的十进制数字 (有至少一位数字, 但是不能以0开头)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"81"</span>;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9][0-9]?$/g</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(str));</div></pre></td></tr></table></figure></p>
<p>匹配一年中的12个月<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"12"</span>;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(0?[1-9]|1[0-2])$/g</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(str));</div></pre></td></tr></table></figure></p>
<p>匹配qq号最长为13为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str =<span class="string">"10009093283333"</span>;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9][0-9]&#123;4,12&#125;$/g</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(str));</div></pre></td></tr></table></figure></p>
<p>匹配常见的固定电话号码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"000-12344562"</span>;</div><div class="line"><span class="comment">//  \(? 匹配左括号一次或0次然后以0开头后面加两个数字，再匹配右括号或空格或减号一次或0次，随后匹配8个数字</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\(?0\d&#123;2&#125;[) -]?\d&#123;8&#125;/g</span>;</div><div class="line"><span class="built_in">console</span>.log(str.match(reg));</div></pre></td></tr></table></figure></p>
<p>匹配ip地址<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"255.221.221.12"</span>;</div><div class="line"><span class="comment">// [01]?\d\d?表示匹配小于199的数，可以说两位数或一位数，2[0-4]\d表示从200到249，配合25[0-5]就表示小于255的数了。</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/(([01]?\d\d?|2[0-4]\d|25[0-5])\.)&#123;3&#125;([01]?\d\d?|2[0-4]\d|25[0-5])$/g</span>;</div><div class="line"><span class="built_in">console</span>.log(str.match(reg));</div></pre></td></tr></table></figure></p>
<p> 匹配用尖括号括起来的以a开头的字符串<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"&lt;a herf='www.baidu.com'&gt;"</span>;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/&lt;a[^&gt;]+&gt;/g</span>;</div><div class="line"><span class="built_in">console</span>.log(str.match(reg));</div></pre></td></tr></table></figure></p>
<p>分割数字每三个以一个逗号划分<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"12345678901"</span>;</div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/(\d)(?=(\d&#123;3&#125;)+$)/g</span>;</div><div class="line">    <span class="comment">//(\d&#123;3&#125;)+$ 的意思是连续匹配 3 个数字，且最后一次匹配以 3 个数字结尾。</span></div><div class="line">    <span class="comment">//要找到所有的单个字符，这些字符的后面跟随的字符的个数必须是3的倍数，并在符合条件的单个字符后面添加,</span></div><div class="line">str.replace(re,<span class="string">'$1,'</span>);</div></pre></td></tr></table></figure></p>
<p>判断字符串是否包含数字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">containsNumber</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> regx = <span class="regexp">/\d/</span>;</div><div class="line">    <span class="keyword">return</span> regx.text(str);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>验证邮箱<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">email</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> regx = <span class="regexp">/^([a-zA-Z0-9_\-])+@([a-zA-Z0-9_\-])+(\.[a-zA-Z0-9_\-])+$/</span>;</div><div class="line">    <span class="keyword">return</span> regx.test(email);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>验证身份证号码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isCardNo</span>(<span class="params">number</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> regx = <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>;</div><div class="line">    <span class="keyword">return</span> regx.test(number);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>去除首尾的’/‘<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'/asdf//'</span>;</div><div class="line">str = str.replace(<span class="regexp">/^\/*|\/*$/g</span>, <span class="string">''</span>);</div></pre></td></tr></table></figure></p>
<p>判断日期格式是否符合</p>
<ul>
<li>‘2017-05-11’的形式，简单判断，只判断格式</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regx = <span class="regexp">/^\d&#123;4&#125;\-\d&#123;1,2&#125;\-\d&#123;1,2&#125;$/</span></div></pre></td></tr></table></figure>
<blockquote>
<p>车牌号正则<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regx = <span class="regexp">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/</span>;</div></pre></td></tr></table></figure></p>
<p>密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regx = <span class="regexp">/^.*(?=.&#123;6,&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span>;</div></pre></td></tr></table></figure></p>
<p>URL正则<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regx = <span class="regexp">/^((https?|ftp|file):\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$/</span>;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用在前端，就一句话：匹配字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Redux（上）</title>
    <link href="http://yoursite.com/2019/06/03/redux(%E4%B8%8A)/"/>
    <id>http://yoursite.com/2019/06/03/redux(上)/</id>
    <published>2019-06-02T16:00:00.000Z</published>
    <updated>2020-07-29T16:30:18.765Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>本节记录学习Redux中<ul>
<li>redux概述</li>
<li>Rudex三大核心 </li>
<li>Redux组成</li>
<li>React-redux<a id="more"></a>
</li>
</ul>
</li>
</ul>
<h4 id="redux概述"><a href="#redux概述" class="headerlink" title="redux概述"></a>redux概述</h4><ul>
<li>随着JavaScript单页面开发日趋复杂，JavaScript需要处理管理更多的state,这些state可能包括服务器响应、缓存数据、本地生成未持久化到服务器的数据，也包括UI状态等。</li>
<li>管理不断变化的state非常麻烦，如果一个model的变化会引起另一个model变化，那么当view变化是，就可能引起对应model以及另一个model的变化，一次可能会引起另一个view的变化。所以就会产生混乱。</li>
<li>而Redux就是为了去解决这个问题。<blockquote>
<p>总结：redux是一个JavaScript容器，用于进行全局的状态管理。</p>
</blockquote>
</li>
</ul>
<h4 id="Rudex三大核心"><a href="#Rudex三大核心" class="headerlink" title="Rudex三大核心"></a>Rudex三大核心</h4><ol>
<li><p>单一数据源<br><img src="http://ww1.sinaimg.cn/large/e0823b04ly1gh481bk9moj20lv09k3za.jpg" alt="微信图片_20200726113822.png"></p>
</li>
<li><p>State是只读的</p>
<p> <strong>唯一改变state的方法就是出发action，action是一个用于描述已发生事件的普通对象</strong></p>
<p> 这样确保了视图和网络请求都不能直接去修改state，相反，它们只能表达想要修改的意图，因为所有的修改都被集中化处理，并且严格按照一个接一个顺序执行</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">store.dispatch(&#123;</div><div class="line">    <span class="attr">type</span>:<span class="string">"COMPLETE_TODO"</span>,</div><div class="line">    <span class="attr">index</span>:<span class="number">1</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>使用纯函数来执行修改</p>
<p> <strong>为了描述action如何改变state tree，你需要去编写reducers</strong></p>
<p> Reducers只是一个纯函数，它接收先前的state和action，并且返回新的state。可以复用、可以控制顺序、传入附加参数。</p>
</li>
</ol>
<h4 id="Redux组成"><a href="#Redux组成" class="headerlink" title="Redux组成"></a>Redux组成</h4><ol>
<li><p>state 状态</p>
<p> <strong>在React中改变状态，大致可分为以下三类</strong></p>
<ul>
<li>DomainDate：服务器端的数据（用户信息、商品列表等）</li>
<li>UI state：当前组件的状态（弹框的显示隐藏、受控组件等等）</li>
<li>APP state：APP级别的状态（loading等）</li>
</ul>
</li>
<li><p>action 事件</p>
<p> <strong>action是把数据从应用传到store的载体，他是store数据的唯一来源，一般，我们通过 store.dispatch() 将action传递给store</strong><br> <img src="http://ww1.sinaimg.cn/large/e0823b04ly1gh48v64ymlj20ot081q47.jpg" alt="b0fbdc0c4d8f5d180edf5fa80ecf7b0.png"></p>
<ul>
<li>action本质就是一个JavaScript普通对象</li>
<li>action对象内部必须要有一个type属性来表示要执行的动作</li>
<li>多数情况下，这个type会被定义成字符串常量</li>
<li>除了type字段外，action的结构可随意定义<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">type</span>:<span class="string">"todo_somthing"</span>,</div><div class="line">    <span class="attr">info</span>:&#123;...&#125;,</div><div class="line">    <span class="attr">isLoading</span>:<span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>注：action只是描述有事情要发生，并没有描述如何更新state</p>
</blockquote>
<ol>
<li><p>Reducer</p>
<p> <strong>reducer本质是一个函数，他是响应发送过来的actions，然后经过处理，把state发送给store</strong></p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> initState=&#123;...&#125;;</div><div class="line">rootRuducer=<span class="function">(<span class="params">state=initState,action</span>)=&gt;</span>&#123;</div><div class="line">    ...</div><div class="line">    return &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注：在reducer函数中，需要return 返回值，这样Store才能接受到数据；函数会接受两个参数，第一个参数是初始化state，第二个参数是action。</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/e0823b04ly1gh495lb9z8j210f08575u.jpg" alt="084e53fff46fe38c91bf06066521a1d.png"></p>
<ol>
<li><p>Store</p>
<p> <strong>Store就是把action与reducer联系到一起的对象</strong></p>
<blockquote>
<p>主要职责</p>
</blockquote>
<ul>
<li>维持应用的state</li>
<li>提供getState() 方法获取state</li>
<li>提供dispatch()方法发送action</li>
<li>通过subscribe()来注册监听</li>
<li>通过subscribe()返回值来注销监听</li>
</ul>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; form <span class="string">"redux"</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(传递的reducer);</div></pre></td></tr></table></figure>
<h4 id="React-redux"><a href="#React-redux" class="headerlink" title="React-redux"></a>React-redux</h4><ol>
<li><p>介绍</p>
<p> <strong>react-redux就是Rudux官方出的 用于配合React的绑定库</strong></p>
<ul>
<li>react-redux能够使你的React自荐从Redux store中很方便的读取数据，并且向store中分发actions以此来更新数据</li>
</ul>
</li>
<li><p>react-redux中的两个重要成员</p>
<p> <strong>Provider</strong></p>
<ul>
<li>Provider包裹在根组件的最外层，使所有子组件都能拿到state</li>
<li>Provider接受store作为props，然后通过context往下传递，这样react中任何组件都可以通过context获取到store</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/e0823b04ly1gh4agkpfdpj20r80bjgnb.jpg" alt="12aa6ec10a169ba940275637234ca76.png"></p>
</li>
</ol>
<p><strong>connect</strong></p>
<ul>
<li>Provider内部组件如果想要使用到state中的数据，就必须要connect进行一层包裹封装，换一句话来说就是必须要被connect进行加强。</li>
<li>connect就是方便我们组件能够获取到store中的state。   </li>
<li><p>导入connect方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>调用connect方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">connect(...)(Component)</div></pre></td></tr></table></figure>
</li>
<li><p>connnect第一个括号参数说明</p>
<ul>
<li><p>mapStateToProps(state,ownProps)</p>
<blockquote>
<p>这个函数允许我们将store中的数据作为props绑定到组件上（state：redux中的store；ownProps:自己的props）</p>
</blockquote>
</li>
<li><p>mapDispatchToProps(dispatch,owmProps)</p>
<blockquote>
<p>将action作为props绑定到我们自己的函数中（dispatch：就是store.dispatch();ownProps:自己的props）</p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;本节记录学习Redux中&lt;ul&gt;
&lt;li&gt;redux概述&lt;/li&gt;
&lt;li&gt;Rudex三大核心 &lt;/li&gt;
&lt;li&gt;Redux组成&lt;/li&gt;
&lt;li&gt;React-redux
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中的泛型(下)</title>
    <link href="http://yoursite.com/2019/05/25/TypeScript%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B(%E4%B8%8B)/"/>
    <id>http://yoursite.com/2019/05/25/TypeScript中的泛型(下)/</id>
    <published>2019-05-24T16:00:00.000Z</published>
    <updated>2020-07-29T16:35:35.831Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本节来一个泛型和接口的综合案例</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>功能：定义一个操作数据库的库  支持 Mysql Mssql  MongoDb</p>
</blockquote>
<ul>
<li><p>要求1：Mysql MsSql  MongoDb功能一样  都有 add  update  delete  get方法    </p>
</li>
<li><p>注意：约束统一的规范、以及代码重用</p>
</li>
<li><p>解决方案：需要约束规范所以要定义接口 ，需要代码重用所以用到泛型</p>
</li>
</ul>
<blockquote>
<p>回忆一下之前的内容</p>
</blockquote>
<ul>
<li><p>接口：在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范</p>
</li>
<li><p>泛型 通俗理解：泛型就是解决 类 接口 方法的复用性、</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">interface DBI&lt;T&gt;&#123;</div><div class="line">    add(info:T):boolean;</div><div class="line">    update(info:T,id:number):boolean;</div><div class="line">    delete(id:number):boolean;</div><div class="line">    get(id:number):any[];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//定义一个操作mysql数据库的类       注意：要实现泛型接口 这个类也应该是一个泛型类</div><div class="line"></div><div class="line">class MysqlDb&lt;T&gt; implements DBI&lt;T&gt;&#123;</div><div class="line"></div><div class="line">    constructor()&#123;</div><div class="line"></div><div class="line">        console.log(&apos;数据库建立连接&apos;);</div><div class="line">    &#125;</div><div class="line">    add(info: T): boolean &#123;</div><div class="line"></div><div class="line">        console.log(info);</div><div class="line"></div><div class="line">        return true;</div><div class="line">       </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    update(info: T, id: number): boolean &#123;</div><div class="line">        throw new Error(&quot;Method not implemented.&quot;);</div><div class="line">    &#125;</div><div class="line">    delete(id: number): boolean &#123;</div><div class="line">        throw new Error(&quot;Method not implemented.&quot;);</div><div class="line">    &#125;</div><div class="line">    get(id: number): any[] &#123;</div><div class="line">        var list=[</div><div class="line"></div><div class="line">            &#123;</div><div class="line">                title:&apos;xxxx&apos;,</div><div class="line">                desc:&apos;xxxxxxxxxx&apos;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                title:&apos;xxxx&apos;,</div><div class="line">                desc:&apos;xxxxxxxxxx&apos;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line"></div><div class="line">        return list;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">//定义一个操作mssql数据库的类  </div><div class="line"></div><div class="line"></div><div class="line">class MsSqlDb&lt;T&gt; implements DBI&lt;T&gt;&#123;</div><div class="line"></div><div class="line">    constructor()&#123;</div><div class="line"></div><div class="line">        console.log(&apos;数据库建立连接&apos;);</div><div class="line">    &#125;</div><div class="line">    add(info: T): boolean &#123;</div><div class="line">        console.log(info);</div><div class="line">        return true;</div><div class="line">    &#125;    </div><div class="line">    update(info: T, id: number): boolean &#123;</div><div class="line">        throw new Error(&quot;Method not implemented.&quot;);</div><div class="line">    &#125;</div><div class="line">    delete(id: number): boolean &#123;</div><div class="line">        throw new Error(&quot;Method not implemented.&quot;);</div><div class="line">    &#125;</div><div class="line">    get(id: number): any[] &#123;</div><div class="line">       </div><div class="line"></div><div class="line">        var list=[</div><div class="line"></div><div class="line">            &#123;</div><div class="line">                title:&apos;xxxx&apos;,</div><div class="line">                desc:&apos;xxxxxxxxxx&apos;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                title:&apos;xxxx&apos;,</div><div class="line">                desc:&apos;xxxxxxxxxx&apos;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line"></div><div class="line">        return list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>操作用户表   定义一个User类和数据表做映射<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class User&#123;</div><div class="line">    username:string | undefined;</div><div class="line">    password:string | undefined;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">var u=new User();</div><div class="line">u.username=&apos;张三111&apos;;</div><div class="line">u.password=&apos;123456&apos;;</div><div class="line"></div><div class="line"></div><div class="line">var oMysql=new MysqlDb&lt;User&gt;(); //类作为参数来约束数据传入的类型 </div><div class="line">oMysql.add(u);</div><div class="line"></div><div class="line">var oMssql=new MsSqlDb&lt;User&gt;();</div><div class="line">oMssql.add(u);</div><div class="line"></div><div class="line"></div><div class="line">//获取User表 ID=4的数据</div><div class="line">var data=oMssql.get(4);</div><div class="line">console.log(data);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本节来一个泛型和接口的综合案例&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中的泛型(上)</title>
    <link href="http://yoursite.com/2019/05/24/TypeScript%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B(%E4%B8%8A)/"/>
    <id>http://yoursite.com/2019/05/24/TypeScript中的泛型(上)/</id>
    <published>2019-05-23T16:00:00.000Z</published>
    <updated>2020-07-29T16:35:30.228Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>本节记录学习typeScript中的<ul>
<li>泛型</li>
<li>泛型变量</li>
<li>泛型类</li>
<li>泛型接口</li>
<li>泛型类接口</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h4 id="泛型介绍"><a href="#泛型介绍" class="headerlink" title="泛型介绍"></a>泛型介绍</h4><p> 软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p>
<p> 在像C#和Java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。</p>
<blockquote>
<p>通俗理解：泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持(类型校验)</p>
</blockquote>
<p>我们先来个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//只能返回string类型的数据</div><div class="line"></div><div class="line">    function getData(value:string):string&#123;</div><div class="line">         return value;</div><div class="line">    &#125;</div><div class="line">//同时返回 string类型 和number类型  （代码冗余）</div><div class="line">    function getData1(value:string):string&#123;</div><div class="line">         return value;</div><div class="line">    &#125;</div><div class="line">    function getData2(value:number):number&#123;</div><div class="line">         return value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//同时返回 string类型 和number类型       any可以解决这个问题</div><div class="line"></div><div class="line">    function getData(value:any):any&#123;</div><div class="line">        return &apos;哈哈哈&apos;;</div><div class="line">    &#125;</div><div class="line">    getData(123);</div><div class="line">    getData(&apos;str&apos;);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>但是any放弃了类型检查,传入什么 返回什么。比如:传入number 类型必须返回number类型  传入 string类型必须返回string类型</p>
<p>所以泛型来了，可以支持不特定的数据类型   要求：传入的参数和返回的参数一致</p>
</blockquote>
<ul>
<li>T表示泛型，具体什么类型是调用这个方法的时候决定的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function getData&lt;T&gt;(value:T):T&#123;</div><div class="line">    return value;</div><div class="line">&#125;</div><div class="line">getData&lt;number&gt;(123);</div><div class="line">getData&lt;string&gt;(&apos;1214231&apos;);</div><div class="line">getData&lt;number&gt;(&apos;2112&apos;)/*错误的写法*/</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p>比如有个最小堆算法，需要同时支持返回数字和字符串 a  -  z两种类型。  通过类的泛型来实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class MinClas&lt;T&gt;&#123;</div><div class="line">    public list:T[]=[];</div><div class="line">    add(value:T):void&#123;</div><div class="line">        this.list.push(value);</div><div class="line">    &#125;</div><div class="line">    min():T&#123;        </div><div class="line">        var minNum=this.list[0];</div><div class="line">        for(var i=0;i&lt;this.list.length;i++)&#123;</div><div class="line">            if(minNum&gt;this.list[i])&#123;</div><div class="line">                minNum=this.list[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return minNum;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var m1=new MinClas&lt;number&gt;();   /*实例化类 并且制定了类的T代表的类型是number*/</div><div class="line">m1.add(11);</div><div class="line">m1.add(3);</div><div class="line">m1.add(2);</div><div class="line">alert(m1.min())</div><div class="line"></div><div class="line">var m2=new MinClas&lt;string&gt;();   /*实例化类 并且制定了类的T代表的类型是string*/</div><div class="line">m2.add(&apos;c&apos;);</div><div class="line">m2.add(&apos;a&apos;);</div><div class="line">m2.add(&apos;v&apos;);</div><div class="line">alert(m2.min())</div></pre></td></tr></table></figure>
<h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>1.我们先来回忆一下函数类型接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">interface ConfigFn&#123;</div><div class="line"></div><div class="line">    (value1:string,value2:string):string;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">var setData:ConfigFn=function(value1:string,value2:string):string&#123;</div><div class="line"></div><div class="line"></div><div class="line">    return value1+value2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">setData(&apos;name&apos;,&apos;张三&apos;);</div></pre></td></tr></table></figure>
<p>2、泛型接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">        interface ConfigFn&lt;T&gt;&#123;</div><div class="line">            (value:T):T;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        function getData&lt;T&gt;(value:T):T&#123;</div><div class="line"></div><div class="line">            return value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        </div><div class="line">        var myGetData:ConfigFn&lt;string&gt;=getData;     </div><div class="line"></div><div class="line"></div><div class="line">        myGetData(&apos;20&apos;);  /*正确*/</div><div class="line">        myGetData(20)  //错误</div><div class="line"></div><div class="line">```      </div><div class="line"></div><div class="line">#### 类的泛型-把类作为参数类型的泛型类</div><div class="line"></div><div class="line">&gt; 先来个例子 </div><div class="line">* 定义一个User的类这个类的作用就是映射数据库字段  </div><div class="line">* 然后定义一个 MysqlDb的类这个类用于操作数据库   </div><div class="line">* 然后把User类作为参数传入到MysqlDb中</div></pre></td></tr></table></figure></p>
<p>//把类作为参数来约束数据传入的类型<br> class User{<br>     username:string | undefined;<br>     pasword:string | undefined;<br> }</p>
<p> class MysqlDb{<br>     add(user:User):boolean{<br>         console.log(user);<br>         return true;<br>     }<br> }<br> var u=new User();<br> u.username=’张三’;<br> u.pasword=’123456’;<br> var Db=new MysqlDb();<br> Db.add(u);</p>
<p> class ArticleCate{<br>     title:string | undefined;<br>     desc:string | undefined;<br>     status:number | undefined<br> }</p>
<p> class MysqlDb{<br>     add(info:ArticleCate):boolean{<br>         console.log(info);<br>         console.log(info.title);<br>         return true;<br> }<br>}<br> var a=new ArticleCate();<br> a.title=”国内”;<br> a.desc=”国内新闻”;<br> a.status=1;<br> var Db=new MysqlDb();<br> Db.add(a);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; 问题：代码重复</div><div class="line">&gt; 接下来我们用泛型实现上面的参数</div><div class="line"></div><div class="line">* 把类作为参数类型的泛型类</div></pre></td></tr></table></figure></p>
<p>//定义操作数据库的泛型类<br>class MysqlDb<t>{<br>    add(info:T):boolean{<br>        console.log(info);<br>        return true;<br>    }<br>    updated(info:T,id:number):boolean {<br>        console.log(info);<br>        console.log(id);<br>        return true;<br>    }<br>}</t></p>
<p>//想给User表增加数据</p>
<p>// 1、定义一个User类 和数据库进行映射</p>
<p> class User{<br>     username:string | undefined;<br>     pasword:string | undefined;<br> }<br> var u=new User();<br> u.username=’张三’;<br> u.pasword=’123456’;<br> var Db=new MysqlDb<user>();<br> Db.add(u);</user></p>
<p>//2、相关ArticleCate增加数据  定义一个ArticleCate类 和数据库进行映射<br>class ArticleCate{<br>    title:string | undefined;<br>    desc:string | undefined;<br>    status:number | undefined;<br>    constructor(params:{<br>        title:string | undefined,<br>        desc:string | undefined,<br>        status?:number | undefined<br>    }){</p>
<pre><code>    this.title=params.title;
    this.desc=params.desc;
    this.status=params.status;
}
</code></pre><p>}<br>//增加操作<br> var a=new ArticleCate({<br>     title:’分类’,<br>     desc:’1111’,<br>     status:1<br> });</p>
<p> //类当做参数的泛型类<br> var Db=new MysqlDb<articlecate>();<br> Db.add(a);</articlecate></p>
<p>//修改数据<br>var a=new ArticleCate({<br>        title:’分类111’,<br>        desc:’2222’<br>});<br>a.status=0;<br>var Db=new MysqlDb<articlecate>();<br>Db.updated(a,12);<br>```</articlecate></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;本节记录学习typeScript中的&lt;ul&gt;
&lt;li&gt;泛型&lt;/li&gt;
&lt;li&gt;泛型变量&lt;/li&gt;
&lt;li&gt;泛型类&lt;/li&gt;
&lt;li&gt;泛型接口&lt;/li&gt;
&lt;li&gt;泛型类接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中的接口</title>
    <link href="http://yoursite.com/2019/05/23/TypeScript%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2019/05/23/TypeScript中的接口/</id>
    <published>2019-05-22T16:00:00.000Z</published>
    <updated>2020-07-29T16:35:23.068Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>本节记录学习typeScript中的<ul>
<li>属性类接口</li>
<li>函数类型接口</li>
<li>可索引接口</li>
<li>类类型接口</li>
<li>接口扩展</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h4 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h4><blockquote>
<p>在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到一种限制和规范的作用。接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部状态数据，也不关心这些类里方法的实现细节，它只规定这批类里必须提供某些方法，提供这些方法的类就可以满足实际需要。 typescrip中的接口类似于java，同时还增加了更灵活的接口类型，包括属性、函数、可索引和类等。</p>
</blockquote>
<h4 id="属性接口"><a href="#属性接口" class="headerlink" title="属性接口"></a>属性接口</h4><p>1、先来个例子  对json的约束</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//ts中自定义方法传入参数,对json进行约束</div><div class="line">function printLabel(labelInfo:&#123;label:string&#125;):void &#123;</div><div class="line">    console.log(&apos;printLabel&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">printLabel(&apos;hahah&apos;); //错误写法</div><div class="line">printLabel(&#123;name:&apos;张三&apos;&#125;);  //错误的写法</div><div class="line">printLabel(&#123;label:&apos;张三&apos;&#125;);  //正确的写法,传入的参数必须有label</div></pre></td></tr></table></figure>
<blockquote>
<p>如果对批量方法传入参数进行约束呢？  就用接口了</p>
</blockquote>
<p>2、接口：行为和动作的规范，对批量方法进行约束</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//就是传入对象的约束    属性接口</div><div class="line">interface FullName&#123;</div><div class="line"></div><div class="line">     firstName:string;   //注意;结束</div><div class="line">     secondName:string;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> function printName(name:FullName)&#123;</div><div class="line"></div><div class="line">    // 必须传入对象  firstName  secondName</div><div class="line">     console.log(name.firstName+&apos;--&apos;+name.secondName);</div><div class="line">&#125;</div><div class="line"> printName(&apos;1213&apos;);  //错误</div><div class="line"></div><div class="line">var obj=&#123;   /*传入的参数必须包含 firstName  secondName*/</div><div class="line">     age:20,</div><div class="line">    firstName:&apos;张&apos;,</div><div class="line">    secondName:&apos;三&apos;</div><div class="line">&#125;;</div><div class="line">printName(obj)</div></pre></td></tr></table></figure>
<p>3、接口 ：可选属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">interface FullName&#123;</div><div class="line">     firstName:string;</div><div class="line">     secondName?:string;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function getName(name:FullName)&#123;</div><div class="line"></div><div class="line">     console.log(name)</div><div class="line">&#125;  </div><div class="line">getName(&#123;               </div><div class="line">     firstName:&apos;firstName&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>4、下面来个例子，使用接口实现ajax的封装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">interface Config&#123;</div><div class="line">    type:string;</div><div class="line">    url:string;</div><div class="line">    data?:string;</div><div class="line">    dataType:string;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//原生js封装的ajax </div><div class="line">function ajax(config:Config)&#123;</div><div class="line"></div><div class="line">   var xhr=new XMLHttpRequest();</div><div class="line"></div><div class="line">   xhr.open(config.type,config.url,true);</div><div class="line"></div><div class="line">   xhr.send(config.data);</div><div class="line"></div><div class="line">   xhr.onreadystatechange=function()&#123;</div><div class="line"></div><div class="line">        if(xhr.readyState==4 &amp;&amp; xhr.status==200)&#123;</div><div class="line">            console.log(&apos;chengong&apos;);</div><div class="line"></div><div class="line"></div><div class="line">            if(config.dataType==&apos;json&apos;)&#123;</div><div class="line"></div><div class="line">                console.log(JSON.parse(xhr.responseText));</div><div class="line">            &#125;else&#123;</div><div class="line">                console.log(xhr.responseText)</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//调用</div><div class="line">ajax(&#123;</div><div class="line">    type:&apos;get&apos;,</div><div class="line">    data:&apos;name=zhangsan&apos;,</div><div class="line">    url:&apos;http://a.itying.com/api/productlist&apos;, //api</div><div class="line">    dataType:&apos;json&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h4><blockquote>
<p>对方法传入的参数 以及返回值进行约束    批量约束<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// 模拟加密的函数类型接口</div><div class="line"></div><div class="line">interface encrypt&#123;</div><div class="line">    (key:string,value:string):string;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">var md5:encrypt=function(key:string,value:string):string&#123;</div><div class="line">        //模拟操作</div><div class="line">        return key+value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(md5(&apos;name&apos;,&apos;zhangsan&apos;));</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">var sha1:encrypt=function(key:string,value:string):string&#123;</div><div class="line"></div><div class="line">    //模拟操作</div><div class="line">    return key+&apos;----&apos;+value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(sha1(&apos;name&apos;,&apos;lisi&apos;));</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="可索引接口：数组、对象的约束-（不常用）"><a href="#可索引接口：数组、对象的约束-（不常用）" class="headerlink" title="可索引接口：数组、对象的约束  （不常用）"></a>可索引接口：数组、对象的约束  （不常用）</h4><p>1、ts定义数组的方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr:number[]=[2342,235325]</div><div class="line">var arr1:Array&lt;string&gt;=[&apos;111&apos;,&apos;222&apos;]</div></pre></td></tr></table></figure></p>
<p>2、可索引接口 对数组的约束<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">interface UserArr&#123;</div><div class="line">     [index:number]:string</div><div class="line">&#125;</div><div class="line"></div><div class="line"> var arr:UserArr=[&apos;aaa&apos;,&apos;bbb&apos;];</div><div class="line"> console.log(arr[0]);</div><div class="line"> var arr:UserArr=[123,&apos;bbb&apos;];  /*错误*/</div><div class="line"> console.log(arr[0]);</div></pre></td></tr></table></figure></p>
<p>3、可索引接口 对对象的约束</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">interface UserObj&#123;</div><div class="line">     [index:string]:string</div><div class="line">&#125;</div><div class="line">var arr:UserObj=&#123;name:&apos;张三&apos;&#125;;</div></pre></td></tr></table></figure>
<h4 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h4><blockquote>
<p>对类的约束  和   抽象类抽象有点相似    </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">interface Animal&#123;</div><div class="line">    name:string;</div><div class="line">    eat(str:string):void;</div><div class="line">&#125;</div><div class="line">class Dog implements Animal&#123;</div><div class="line">    name:string;</div><div class="line">    constructor(name:string)&#123;</div><div class="line">        this.name=name;</div><div class="line">    &#125;</div><div class="line">    eat()&#123;</div><div class="line">        console.log(this.name+&apos;吃粮食&apos;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var d=new Dog(&apos;小黑&apos;);</div><div class="line">d.eat();</div><div class="line"></div><div class="line">class Cat implements Animal&#123;</div><div class="line">    name:string;</div><div class="line">    constructor(name:string)&#123;</div><div class="line">        this.name=name;</div><div class="line">    &#125;</div><div class="line">    eat(food:string)&#123;</div><div class="line">        console.log(this.name+&apos;吃&apos;+food);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var c=new Cat(&apos;小花&apos;);</div><div class="line">c.eat(&apos;老鼠&apos;);</div></pre></td></tr></table></figure>
<h4 id="接口扩展"><a href="#接口扩展" class="headerlink" title="接口扩展"></a>接口扩展</h4><blockquote>
<p>接口可以继承接口   </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> interface Animal&#123;</div><div class="line">     eat():void;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> interface Person extends Animal&#123;</div><div class="line">     work():void;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> class Web implements Person&#123;</div><div class="line">     public name:string;</div><div class="line">     constructor(name:string)&#123;</div><div class="line">         this.name=name;</div><div class="line">     &#125;</div><div class="line">    eat()&#123;</div><div class="line">         console.log(this.name+&apos;喜欢吃馒头&apos;)</div><div class="line">     &#125;</div><div class="line">     work()&#123;</div><div class="line"></div><div class="line">      console.log(this.name+&apos;写代码&apos;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">var w=new Web(&apos;小李&apos;);</div><div class="line">w.work();//小李写代码</div><div class="line">w.eat();//小李喜欢吃馒头</div></pre></td></tr></table></figure>
<p>再来一个复杂点的例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">interface Animal&#123;</div><div class="line">    eat():void;</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface Person extends Animal&#123;</div><div class="line">    work():void;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">class Programmer&#123;</div><div class="line">    public name:string;</div><div class="line">    constructor(name:string)&#123;</div><div class="line">        this.name=name;</div><div class="line">    &#125;</div><div class="line">    coding(code:string)&#123;</div><div class="line">        console.log(this.name+code)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">class Web extends Programmer implements Person&#123;</div><div class="line">    constructor(name:string)&#123;</div><div class="line">       super(name)</div><div class="line">    &#125;</div><div class="line">    eat()&#123;//Web类必须实现eat方法</div><div class="line">        console.log(this.name+&apos;喜欢吃馒头&apos;)</div><div class="line">    &#125;</div><div class="line">    work()&#123;//Web类必须实现work方法</div><div class="line">        console.log(this.name+&apos;写代码&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var w=new Web(&apos;小郭&apos;);</div><div class="line">w.eat();//小郭喜欢吃馒头</div><div class="line">w.coding(&apos;写ts代码&apos;);//小郭写ts代码</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;本节记录学习typeScript中的&lt;ul&gt;
&lt;li&gt;属性类接口&lt;/li&gt;
&lt;li&gt;函数类型接口&lt;/li&gt;
&lt;li&gt;可索引接口&lt;/li&gt;
&lt;li&gt;类类型接口&lt;/li&gt;
&lt;li&gt;接口扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript的类（下）</title>
    <link href="http://yoursite.com/2019/05/22/TypeScript%E4%B8%AD%E7%9A%84%E7%B1%BB%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/22/TypeScript中的类（下）/</id>
    <published>2019-05-21T16:00:00.000Z</published>
    <updated>2020-07-29T16:30:20.523Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>本节记录学习Typescript中<ul>
<li>类中的静态属性 静态方法 </li>
<li>抽象类 </li>
<li>多态</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h4 id="静态属性-静态方法"><a href="#静态属性-静态方法" class="headerlink" title="静态属性 静态方法"></a>静态属性 静态方法</h4><blockquote>
<p>先回忆下es5中的静态属性及方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.run1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//实例方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Person.name=<span class="string">'哈哈哈'</span>;</div><div class="line">Person.run2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//静态方法</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> Person();</div><div class="line">Person.run2(); 静态方法的调用</div></pre></td></tr></table></figure></p>
<p>静态方法存在的意义<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//举个例子，jQuery我们都用过吧，比如下面这两个api</span></div><div class="line">        $(<span class="string">'#box'</span>).css(<span class="string">'color'</span>,<span class="string">'red'</span>)</div><div class="line">        $.get(<span class="string">'url'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        &#125;)</div><div class="line"> </div><div class="line"> <span class="comment">//我们简单模拟一下上面的api       </span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">element</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Base(element)</div><div class="line">        &#125;</div><div class="line">        $.get=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params">element</span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.element=获取dom节点;</div><div class="line">            <span class="keyword">this</span>.css=<span class="function"><span class="keyword">function</span>(<span class="params">arr,value</span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.element.style.arr=value;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//总结：$.get()就是静态方法，$('#box').css()就是实例方法。</span></div></pre></td></tr></table></figure></p>
<p>TypeScript中的静态属性及方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Per</span></span>&#123;</div><div class="line">     public name:string;</div><div class="line">     public age:number=<span class="number">20</span>;</div><div class="line">     <span class="comment">//静态属性</span></div><div class="line">     <span class="keyword">static</span> sex=<span class="string">"男"</span>;</div><div class="line">     <span class="keyword">constructor</span>(name:string) &#123;</div><div class="line">             <span class="keyword">this</span>.name=name;</div><div class="line">     &#125;</div><div class="line">     run()&#123;  <span class="comment">/*实例方法*/</span></div><div class="line">         alert(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在运动`</span>)</div><div class="line">     &#125;</div><div class="line">     work()&#123;</div><div class="line">         alert(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在工作`</span>)</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">static</span> print()&#123;  <span class="comment">/*静态方法  里面没法直接调用类里面的属性*/</span></div><div class="line">         alert(<span class="string">'print方法'</span>+Per.sex);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> Per(<span class="string">'张三'</span>);</div><div class="line"> p.run();</div><div class="line"> Per.print();</div><div class="line"> alert(Per.sex);</div></pre></td></tr></table></figure>
<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ul>
<li>父类定义一个方法不去实现，让继承它的子类去实现  每一个子类有不同的表现 </li>
<li>多态属于继承</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    name:string;</div><div class="line">    <span class="keyword">constructor</span>(name:string) &#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">    &#125;</div><div class="line">    eat()&#123;   <span class="comment">//具体吃什么  不知道   ，  具体吃什么?继承它的子类去实现 ，每一个子类的表现不一样</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'吃的方法'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">        <span class="keyword">super</span>(name)</div><div class="line">    &#125;</div><div class="line">    eat()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name+<span class="string">'吃粮食'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">        <span class="keyword">super</span>(name)</div><div class="line">    &#125;</div><div class="line">    eat()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name+<span class="string">'吃老鼠'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><ul>
<li>它是提供其他类继承的基类，不能直接被实例化。</li>
<li>用abstract关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。</li>
<li>abstract抽象方法只能放在抽象类里面</li>
<li>抽象类和抽象方法用来定义标准 。   标准：Animal 这个类要求它的子类必须包含eat方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//标准:</span></div><div class="line"></div><div class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    public name:string;</div><div class="line">    <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">    &#125;</div><div class="line">    abstract eat():any;  <span class="comment">//抽象方法不包含具体实现并且必须在派生类中实现。</span></div><div class="line">    run()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'其他方法可以不实现'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// var a=new Animal() /*错误的写法*/</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="comment">//抽象类的子类必须实现抽象类里面的抽象方法</span></div><div class="line">    <span class="keyword">constructor</span>(name:any)&#123;</div><div class="line">        <span class="keyword">super</span>(name)</div><div class="line">    &#125;</div><div class="line">    eat()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'吃粮食'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> Dog(<span class="string">'小花花'</span>);</div><div class="line">d.eat();</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="comment">//抽象类的子类必须实现抽象类里面的抽象方法</span></div><div class="line">    <span class="keyword">constructor</span>(name:any)&#123;</div><div class="line">        <span class="keyword">super</span>(name)</div><div class="line">    &#125;</div><div class="line">    run()&#123;</div><div class="line">    &#125;</div><div class="line">    eat()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'吃老鼠'</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c=<span class="keyword">new</span> Cat(<span class="string">'小花猫'</span>);</div><div class="line">c.eat();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;本节记录学习Typescript中&lt;ul&gt;
&lt;li&gt;类中的静态属性 静态方法 &lt;/li&gt;
&lt;li&gt;抽象类 &lt;/li&gt;
&lt;li&gt;多态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TS" scheme="http://yoursite.com/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript的类（上）</title>
    <link href="http://yoursite.com/2019/05/21/TypeScript%E4%B8%AD%E7%9A%84%E7%B1%BB%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/21/TypeScript中的类（上）/</id>
    <published>2019-05-20T16:00:00.000Z</published>
    <updated>2020-07-29T16:30:19.732Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>本节记录学习TS中的类。</li>
<li>先回忆下es5中的类及其继承。</li>
<li>然后练习TS中的类和继承及其修饰符。</li>
</ul>
<a id="more"></a>
<h4 id="es5中的类"><a href="#es5中的类" class="headerlink" title="es5中的类"></a>es5中的类</h4><blockquote>
<p>最简单的类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=<span class="string">'张三'</span>;</div><div class="line">    <span class="keyword">this</span>.age=<span class="number">20</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> Person();</div><div class="line">alert(p.name);</div></pre></td></tr></table></figure></p>
<p>构造函数和原型链里面增加方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=<span class="string">'张三'</span>;  <span class="comment">/*属性*/</span></div><div class="line">    <span class="keyword">this</span>.age=<span class="number">20</span>;</div><div class="line">    <span class="keyword">this</span>.run=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name+<span class="string">'在运动'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//原型链上面的属性会被多个实例共享   构造函数不会</span></div><div class="line">Person.prototype.sex=<span class="string">"男"</span>;</div><div class="line">Person.prototype.work=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name+<span class="string">'在工作'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> Person();</div><div class="line">alert(p.name);</div><div class="line">p.run();</div><div class="line">p.work();</div></pre></td></tr></table></figure></p>
<p>类里面的静态方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=<span class="string">'张三'</span>;  <span class="comment">/*属性*/</span></div><div class="line">    <span class="keyword">this</span>.age=<span class="number">20</span>;</div><div class="line">    <span class="keyword">this</span>.run=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">/*实例方法*/</span></div><div class="line">        lert(<span class="keyword">this</span>.name+<span class="string">'在运动'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Person.getInfo=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    alert(<span class="string">'我是静态方法'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//原型链上面的属性会被多个实例共享   构造函数不会</span></div><div class="line">Person.prototype.work=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     alert(<span class="keyword">this</span>.name+<span class="string">'在工作'</span>);</div><div class="line"></div><div class="line"> &#125;</div><div class="line"> <span class="keyword">var</span> p=<span class="keyword">new</span> Person();    </div><div class="line"> p.work();</div><div class="line"></div><div class="line"><span class="comment">//调用静态方法</span></div><div class="line">Person.getInfo();</div></pre></td></tr></table></figure>
<blockquote>
<p>es5里面的继承   对象冒充实现继承</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">this</span>.name=<span class="string">'张三'</span>;  <span class="comment">/*属性*/</span></div><div class="line">     <span class="keyword">this</span>.age=<span class="number">20</span>;</div><div class="line">     <span class="keyword">this</span>.run=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">/*实例方法*/</span></div><div class="line">        alert(<span class="keyword">this</span>.name+<span class="string">'在运动'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> &#125;      </div><div class="line"> Person.prototype.sex=<span class="string">"男"</span>;</div><div class="line"> Person.prototype.work=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="keyword">this</span>.name+<span class="string">'在工作'</span>);</div><div class="line"></div><div class="line"> &#125;</div><div class="line">   </div><div class="line"> <span class="comment">//Web类 继承Person类   原型链+对象冒充的组合继承模式</span></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     Person.call(<span class="keyword">this</span>);    <span class="comment">/*对象冒充实现继承*/</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> w=<span class="keyword">new</span> Web();</div><div class="line">w.run();  <span class="comment">//对象冒充可以继承构造函数里面的属性和方法</span></div><div class="line">w.work();  <span class="comment">//对象冒充可以继承构造函数里面的属性和方法   但是没法继承原型链上面的属性和方法</span></div></pre></td></tr></table></figure>
<blockquote>
<p>es5里面的继承   原型链实现继承</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">this</span>.name=<span class="string">'张三'</span>;  <span class="comment">/*属性*/</span></div><div class="line">     <span class="keyword">this</span>.age=<span class="number">20</span>;</div><div class="line">     <span class="keyword">this</span>.run=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">/*实例方法*/</span></div><div class="line">         alert(<span class="keyword">this</span>.name+<span class="string">'在运动'</span>);</div><div class="line">     &#125;</div><div class="line"></div><div class="line"> &#125;      </div><div class="line"> Person.prototype.sex=<span class="string">"男"</span>;</div><div class="line"> Person.prototype.work=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="keyword">this</span>.name+<span class="string">'在工作'</span>);</div><div class="line"></div><div class="line"> &#125;</div><div class="line">   </div><div class="line"> <span class="comment">//Web类 继承Person类   原型链+对象冒充的组合继承模式</span></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     </div><div class="line"> &#125;</div><div class="line"></div><div class="line">Web.prototype=<span class="keyword">new</span> Person();   <span class="comment">//原型链实现继承</span></div><div class="line"><span class="keyword">var</span> w=<span class="keyword">new</span> Web();</div><div class="line"> <span class="comment">//原型链实现继承:可以继承构造函数里面的属性和方法 也可以继承原型链上面的属性和方法</span></div><div class="line">w.run();</div><div class="line">w.work();</div></pre></td></tr></table></figure>
<blockquote>
<p>原型链实现继承的 问题？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">         <span class="keyword">this</span>.name=name;  <span class="comment">/*属性*/</span></div><div class="line">         <span class="keyword">this</span>.age=age;</div><div class="line">         <span class="keyword">this</span>.run=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">/*实例方法*/</span></div><div class="line">             alert(<span class="keyword">this</span>.name+<span class="string">'在运动'</span>);</div><div class="line">         &#125;</div><div class="line"></div><div class="line"> &#125;      </div><div class="line">Person.prototype.sex=<span class="string">"男"</span>;</div><div class="line">Person.prototype.work=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name+<span class="string">'在工作'</span>);</div><div class="line">&#125;</div><div class="line">       </div><div class="line">      </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> Web.prototype=<span class="keyword">new</span> Person();</div><div class="line"> <span class="keyword">var</span> w=<span class="keyword">new</span> Web(<span class="string">'赵四'</span>,<span class="number">20</span>);   <span class="comment">//实例化子类的时候没法给父类传参</span></div><div class="line"> w.run();</div></pre></td></tr></table></figure></p>
<p>原型链+对象冒充的组合继承模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">          <span class="keyword">this</span>.name=name;  <span class="comment">/*属性*/</span></div><div class="line">          <span class="keyword">this</span>.age=age;</div><div class="line">          <span class="keyword">this</span>.run=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">/*实例方法*/</span></div><div class="line">              alert(<span class="keyword">this</span>.name+<span class="string">'在运动'</span>);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">  &#125;      </div><div class="line">  Person.prototype.sex=<span class="string">"男"</span>;</div><div class="line">  Person.prototype.work=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.name+<span class="string">'在工作'</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line">    </div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line"></div><div class="line">      Person.call(<span class="keyword">this</span>,name,age);   <span class="comment">//对象冒充继承   实例化子类可以给父类传参</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  Web.prototype=<span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">  <span class="keyword">var</span> w=<span class="keyword">new</span> Web(<span class="string">'赵四'</span>,<span class="number">20</span>);   <span class="comment">//实例化子类的时候没法给父类传参</span></div><div class="line"></div><div class="line">   w.run();</div><div class="line">  w.work();</div></pre></td></tr></table></figure></p>
<p>原型链+对象冒充继承的另一种方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">         <span class="keyword">this</span>.name=name;  <span class="comment">/*属性*/</span></div><div class="line">         <span class="keyword">this</span>.age=age;</div><div class="line">         <span class="keyword">this</span>.run=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">/*实例方法*/</span></div><div class="line">             alert(<span class="keyword">this</span>.name+<span class="string">'在运动'</span>);</div><div class="line">         &#125;</div><div class="line"></div><div class="line"> &#125;      </div><div class="line"> Person.prototype.sex=<span class="string">"男"</span>;</div><div class="line"> Person.prototype.work=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         alert(<span class="keyword">this</span>.name+<span class="string">'在工作'</span>);</div><div class="line"></div><div class="line"> &#125;</div><div class="line">    </div><div class="line">   </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line"></div><div class="line">     Person.call(<span class="keyword">this</span>,name,age);   <span class="comment">//对象冒充继承  可以继承构造函数里面的属性和方法、实例化子类可以给父类传参</span></div><div class="line"> &#125;</div><div class="line"> <span class="comment">//重点在这儿</span></div><div class="line"> Web.prototype=Person.prototype;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> w=<span class="keyword">new</span> Web(<span class="string">'赵四'</span>,<span class="number">20</span>);   <span class="comment">//实例化子类的时候没法给父类传参</span></div><div class="line"></div><div class="line"> w.run();</div><div class="line"> w.work();</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="ts中类的定义"><a href="#ts中类的定义" class="headerlink" title="ts中类的定义"></a>ts中类的定义</h4><blockquote>
<p>ts中定义类：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    name:string;   <span class="comment">//属性  前面省略了public关键词</span></div><div class="line">    <span class="keyword">constructor</span>(n:string)&#123;  <span class="comment">//构造函数   实例化类的时候触发的方法</span></div><div class="line">        <span class="keyword">this</span>.name=n;</div><div class="line">    &#125;</div><div class="line">    run():<span class="keyword">void</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> Person(<span class="string">'张三'</span>);</div><div class="line">p.run()</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    name:string; </div><div class="line">    <span class="keyword">constructor</span>(name:string)&#123;  <span class="comment">//构造函数   实例化类的时候触发的方法</span></div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">    &#125;</div><div class="line">    getName():string&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">    setName(name:string):<span class="keyword">void</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> Person(<span class="string">'张三'</span>);</div><div class="line">alert(p.getName());</div><div class="line">p.setName(<span class="string">'李四'</span>);</div><div class="line">alert(p.getName());</div></pre></td></tr></table></figure>
<blockquote>
<p>ts中实现继承  extends、 super</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    name:string;</div><div class="line">    <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">    &#125;</div><div class="line">   run():string&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在运动`</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> <span class="keyword">var</span> p=<span class="keyword">new</span> Person(<span class="string">'王五'</span>);</div><div class="line"> alert(p.run())</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">       <span class="keyword">super</span>(name);  <span class="comment">/*初始化父类的构造函数*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> w=<span class="keyword">new</span> Web(<span class="string">'李四'</span>);</div><div class="line">alert(w.run());</div></pre></td></tr></table></figure>
<blockquote>
<p>ts中继承的探讨  父类的方法和子类的方法一致</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line"></div><div class="line">     name:string;</div><div class="line"></div><div class="line">     <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">         <span class="keyword">this</span>.name=name;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     run():string&#123;</div><div class="line"></div><div class="line">         <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在运动`</span></div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">var</span> p=<span class="keyword">new</span> Person(<span class="string">'王五'</span>);</div><div class="line"> alert(p.run())</div><div class="line"></div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</div><div class="line">     <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">         <span class="keyword">super</span>(name);  <span class="comment">/*初始化父类的构造函数*/</span></div><div class="line">     &#125;</div><div class="line">     run():string&#123;</div><div class="line">         <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在运动-子类`</span></div><div class="line">     &#125;</div><div class="line">     work()&#123;</div><div class="line">         alert(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在工作`</span>)</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> w=<span class="keyword">new</span> Web(<span class="string">'李四'</span>);</div><div class="line">alert(w.run());</div><div class="line">w.work();</div><div class="line">alert(w.run());</div><div class="line"></div><div class="line">结论：如果方法一致，先去子类里面找，没有再去父类找。</div></pre></td></tr></table></figure>
<blockquote>
<p>类里面的修饰符  typescript里面定义属性的时候给我们提供了 三种修饰符</p>
</blockquote>
<ul>
<li>public :公有          在当前类里面、 子类  、类外面都可以访问（属性如果不加修饰符 默认就是 公有）</li>
<li>protected：保护类型    在当前类里面、子类里面可以访问 ，在类外部没法访问</li>
<li>private ：私有         在当前类里面可以访问，子类、类外部都没法访问</li>
</ul>
<p>public :公有          在类里面、 子类  、类外面都可以访问<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">       <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line"></div><div class="line">             public name:string;  <span class="comment">/*公有属性*/</span></div><div class="line"></div><div class="line">             <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">                 <span class="keyword">this</span>.name=name;</div><div class="line">             &#125;</div><div class="line"></div><div class="line">             run():string&#123;</div><div class="line"></div><div class="line">                 <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在运动`</span></div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">        <span class="keyword">var</span> p=<span class="keyword">new</span> Person(<span class="string">'王五'</span>);</div><div class="line">        alert(p.run())</div><div class="line"></div><div class="line"></div><div class="line">         <span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</div><div class="line">             <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">                 <span class="keyword">super</span>(name);  <span class="comment">/*初始化父类的构造函数*/</span></div><div class="line">             &#125;</div><div class="line">             run():string&#123;</div><div class="line">                 <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在运动-子类`</span></div><div class="line">             &#125;</div><div class="line">             work()&#123;</div><div class="line">                 alert(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在工作`</span>)</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">        <span class="keyword">var</span> w=<span class="keyword">new</span> Web(<span class="string">'李四'</span>);</div><div class="line">        w.work();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//类外部访问公有属性(注：和上面无关)</span></div><div class="line"></div><div class="line">           <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">             public name:string;  <span class="comment">/*公有属性*/</span></div><div class="line">             <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">                 <span class="keyword">this</span>.name=name;</div><div class="line">             &#125;</div><div class="line">             run():string&#123;</div><div class="line">                 <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在运动`</span></div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">var</span>  p=<span class="keyword">new</span> Person(<span class="string">'哈哈哈'</span>);</div><div class="line">         alert(p.name);</div></pre></td></tr></table></figure></p>
<p>protected：保护类型    在类里面、子类里面可以访问 ，在类外部没法访问</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">       <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">             protected name:string;  <span class="comment">/*公有属性*/</span></div><div class="line">             <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">                <span class="keyword">this</span>.name=name;</div><div class="line">             &#125;</div><div class="line">             run():string&#123;</div><div class="line">                 <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在运动`</span></div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">var</span> p=<span class="keyword">new</span> Person(<span class="string">'王五'</span>);</div><div class="line">         alert(p.run())</div><div class="line"></div><div class="line"></div><div class="line">         <span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</div><div class="line">             <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line"></div><div class="line">                 <span class="keyword">super</span>(name);  <span class="comment">/*初始化父类的构造函数*/</span></div><div class="line">             &#125;                  </div><div class="line">             work()&#123;</div><div class="line"></div><div class="line">                 alert(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在工作`</span>)</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">var</span> w=<span class="keyword">new</span> Web(<span class="string">'李四11'</span>);</div><div class="line"></div><div class="line">         w.work();</div><div class="line"></div><div class="line">         alert( w.run());</div><div class="line"></div><div class="line"></div><div class="line">        </div><div class="line"><span class="comment">//类外外部没法访问保护类型的属性</span></div><div class="line">         <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">             protected name:string;  <span class="comment">/*保护类型*/</span></div><div class="line">             <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">                <span class="keyword">this</span>.name=name;</div><div class="line">             &#125;</div><div class="line">             run():string&#123;</div><div class="line">                 <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在运动`</span></div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">var</span>  p=<span class="keyword">new</span> Person(<span class="string">'哈哈哈'</span>);</div><div class="line">         alert(p.name);</div></pre></td></tr></table></figure>
<p>private ：私有        在类里面可以访问，子类、类外部都没法访问</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">             <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">                 private name:string;  <span class="comment">/*私有*/</span></div><div class="line">                 <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">                     <span class="keyword">this</span>.name=name;</div><div class="line">                 &#125;</div><div class="line">                 run():string&#123;</div><div class="line">                     <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在运动`</span></div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">             <span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</div><div class="line">                 <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">                     <span class="keyword">super</span>(name)</div><div class="line">                 &#125;</div><div class="line">                 work()&#123;</div><div class="line">                     <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在工作`</span>)</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line"></div><div class="line">    private name:string;  <span class="comment">/*私有*/</span></div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(name:string)&#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    run():string&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在运动`</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> Person(<span class="string">'哈哈哈'</span>);</div><div class="line"></div><div class="line">alert(p.run());</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;本节记录学习TS中的类。&lt;/li&gt;
&lt;li&gt;先回忆下es5中的类及其继承。&lt;/li&gt;
&lt;li&gt;然后练习TS中的类和继承及其修饰符。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TS" scheme="http://yoursite.com/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript的函数</title>
    <link href="http://yoursite.com/2019/05/20/Typescript%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%20/"/>
    <id>http://yoursite.com/2019/05/20/Typescript中的函数 /</id>
    <published>2019-05-19T16:00:00.000Z</published>
    <updated>2020-07-29T16:22:33.525Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本节记录学习TS中的函数，包括函数的定义、可选参数、默认参数、剩余参数、函数重载、es6箭头函数  </p>
</blockquote>
<a id="more"></a>
<h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><blockquote>
<p>es5定义函数的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//函数声明法</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'run'</span>;</div><div class="line"> &#125;</div><div class="line"><span class="comment">//匿名函数</span></div><div class="line">  <span class="keyword">var</span> run2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'run2'</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>ts中定义函数的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//函数声明法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">string</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'run'</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//错误写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">string</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">123</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//匿名函数</span></div><div class="line"><span class="keyword">var</span> fun2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>):<span class="title">number</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">123</span>;</div><div class="line">&#125;</div><div class="line">alert(fun2()); <span class="comment">/*调用方法*/</span></div></pre></td></tr></table></figure></p>
<p>ts中定义方法传参<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:string,age:number</span>):<span class="title">string</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>;</div><div class="line">&#125;</div><div class="line">alert(getInfo(<span class="string">'zhangsan'</span>,<span class="number">20</span>));</div></pre></td></tr></table></figure></p>
<p>没有返回值的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'run'</span>);</div><div class="line">&#125;</div><div class="line">run();</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="方法可选参数"><a href="#方法可选参数" class="headerlink" title="方法可选参数"></a>方法可选参数</h4><blockquote>
<p>es5里面方法的实参和行参可以不一样，但是ts中必须一样，如果不一样就需要配置可选参数 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:string,age?:number</span>):<span class="title">string</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(age)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> ---年龄保密`</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">alert(getInfo(<span class="string">'zhangsan'</span>)); <span class="comment">//zhangsan --- 年龄保密</span></div><div class="line">alert(getInfo(<span class="string">'zhangsan'</span>,<span class="number">123</span>)); <span class="comment">//zhangsan --- 123</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意:可选参数必须配置到参数的最后面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//错误写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name?:string,age:number</span>):<span class="title">string</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(age)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> ---年龄保密`</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert(getInfo(<span class="string">'zhangsan'</span>))</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><blockquote>
<p>es5里面没法设置默认参数，es6和ts中都可以设置默认参数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:string,age:number=<span class="number">20</span></span>):<span class="title">string</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(age)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> ---年龄保密`</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert( getInfo(<span class="string">'张三'</span>));<span class="comment">//张三 --- 20</span></div><div class="line">alert( getInfo(<span class="string">'张三'</span>,<span class="number">30</span>));<span class="comment">//张三 --- 30</span></div><div class="line"><span class="string">``</span><span class="string">`     </span></div><div class="line"></div><div class="line">#### 剩余参数(参数很多，根本写不完怎么办？)</div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a:number,b:number,c:number,d:number</span>):<span class="title">number</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a+b+c+d;</div><div class="line">&#125;</div><div class="line">alert(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">//10</span></div><div class="line"></div><div class="line"><span class="comment">//三点运算符 接受新参传过来的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...result:number[]</span>):<span class="title">number</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;result.length;i++)&#123;</div><div class="line">        sum+=result[i];  </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line">alert(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)) ;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a:number,b:number,...result:number[]</span>):<span class="title">number</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> sum=a+b;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;result.length;i++)&#123;</div><div class="line">        sum+=result[i];  </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line">alert(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)) ;<span class="comment">//1赋值给a,2赋值给b,其余赋值给result;</span></div></pre></td></tr></table></figure>
<h4 id="ts函数重载"><a href="#ts函数重载" class="headerlink" title="ts函数重载"></a>ts函数重载</h4><blockquote>
<p>java中方法的重载：重载指的是两个或者两个以上同名函数，但它们的参数不一样，这时会出现函数重载的情况。</p>
<p>typescript中的重载：通过为同一个函数提供多个函数类型定义来试下多种功能的目的。</p>
<p>ts为了兼容es5 以及 es6 重载的写法和java中有区别。</p>
</blockquote>
<ul>
<li>es5中出现同名方法，下面的会替换上面的方法 </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">config</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">config,value</span>)</span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>ts中的重载<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:string</span>):<span class="title">string</span>;</span></div><div class="line"><span class="title">function</span> <span class="title">getInfo</span>(<span class="params">age:number</span>):<span class="title">string</span>;</div><div class="line"><span class="title">function</span> <span class="title">getInfo</span>(<span class="params">str:any</span>):<span class="title">any</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> str===<span class="string">'string'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'我叫：'</span>+str;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'我的年龄是'</span>+str;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert(getInfo(<span class="string">'张三'</span>));   <span class="comment">//正确</span></div><div class="line">alert(getInfo(<span class="number">20</span>));   <span class="comment">//正确</span></div><div class="line">alert(getInfo(<span class="literal">true</span>));    <span class="comment">//错误写法</span></div><div class="line"></div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:string</span>):<span class="title">string</span>;</span></div><div class="line"><span class="title">function</span> <span class="title">getInfo</span>(<span class="params">name:string,age:number</span>):<span class="title">string</span>;</div><div class="line"><span class="title">function</span> <span class="title">getInfo</span>(<span class="params">name:any,age?:any</span>):<span class="title">any</span>&#123;</div><div class="line">    <span class="keyword">if</span>(age)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'我叫：'</span>+name+<span class="string">'我的年龄是'</span>+age;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'我叫：'</span>+name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert(getInfo(<span class="string">'zhangsan'</span>));  <span class="comment">/*正确*/</span></div><div class="line">alert(getInfo(<span class="number">123</span>));  错误</div><div class="line">alert(getInfo(<span class="string">'zhangsan'</span>,<span class="number">20</span>));</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="3-6、箭头函数-es6"><a href="#3-6、箭头函数-es6" class="headerlink" title="3.6、箭头函数  es6"></a>3.6、箭头函数  es6</h4><blockquote>
<p>this指向的问题    箭头函数里面的this指向上下文</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">            </div><div class="line"><span class="comment">//es5函数写法</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   alert(<span class="string">'run'</span>)</div><div class="line">&#125;,<span class="number">1000</span>)</div><div class="line"></div><div class="line"><span class="comment">//es6中函数写法</span></div><div class="line"> setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    alert(<span class="string">'run'</span>)</div><div class="line">&#125;,<span class="number">1000</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本节记录学习TS中的函数，包括函数的定义、可选参数、默认参数、剩余参数、函数重载、es6箭头函数  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TS" scheme="http://yoursite.com/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript介绍、安装、编译及开发工具配置</title>
    <link href="http://yoursite.com/2019/05/19/TypeScript%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/05/19/TypeScript中的数据类型/</id>
    <published>2019-05-18T16:00:00.000Z</published>
    <updated>2020-05-25T14:27:54.286Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> typescript中为了使编写的代码更规范，更有利于维护，增加了类型校验，在typescript中主要给我们提供了以下数据类型</p>
<ul>
<li>布尔类型（boolean）</li>
<li>数字类型（number）</li>
<li>字符串类型(string)</li>
<li>数组类型（array）</li>
<li>元组类型（tuple）</li>
<li>枚举类型（enum）</li>
<li>任意类型（any）</li>
<li>null 和 undefined</li>
<li>void类型</li>
<li>never类型</li>
</ul>
</blockquote>
<a id="more"></a>
<h4 id="布尔类型（boolean）"><a href="#布尔类型（boolean）" class="headerlink" title="布尔类型（boolean）"></a>布尔类型（boolean）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//es5的写法（正确写法）</span></div><div class="line"><span class="keyword">var</span> flag=<span class="literal">true</span>;</div><div class="line">    flag=<span class="number">456</span>;</div><div class="line">    </div><div class="line"><span class="comment">//在ts中会报错    </span></div><div class="line"><span class="keyword">var</span> flag:boolean=<span class="literal">true</span>;</div><div class="line">    flag=<span class="number">123</span>;  <span class="comment">//错误</span></div><div class="line">    flag=<span class="literal">false</span>;  <span class="comment">//正确</span></div></pre></td></tr></table></figure>
<h4 id="数字类型（number）"><a href="#数字类型（number）" class="headerlink" title="数字类型（number）"></a>数字类型（number）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num:number=<span class="number">123</span>;</div><div class="line">    num=<span class="number">456</span>;</div><div class="line">    <span class="built_in">console</span>.log(num);  <span class="regexp">/正确/</span></div><div class="line">    num=<span class="string">'str'</span>;    <span class="comment">//错误</span></div></pre></td></tr></table></figure>
<h4 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型(string)"></a>字符串类型(string)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str:string=<span class="string">'this is ts'</span>;</div><div class="line">    str=<span class="string">'haha'</span>;  <span class="comment">//正确</span></div><div class="line">    str=<span class="literal">true</span>;  <span class="comment">//错误</span></div></pre></td></tr></table></figure>
<h4 id="数组类型（array）"><a href="#数组类型（array）" class="headerlink" title="数组类型（array）"></a>数组类型（array）</h4><ul>
<li>ts中定义数组有两种方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.第一种定义数组的方式</span></div><div class="line"><span class="keyword">var</span> arr:number[]=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>];</div><div class="line"></div><div class="line"><span class="comment">//2.第二种定义数组的方式</span></div><div class="line"><span class="keyword">var</span> arr:<span class="built_in">Array</span>&lt;number&gt;=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>];</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="元组类型（tuple）"><a href="#元组类型（tuple）" class="headerlink" title="元组类型（tuple）"></a>元组类型（tuple）</h4><ul>
<li>属于数组的一种<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr:[number,string]=[<span class="number">123</span>,<span class="string">'this is ts'</span>];</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="枚举类型（enum）"><a href="#枚举类型（enum）" class="headerlink" title="枚举类型（enum）"></a>枚举类型（enum）</h4><ul>
<li>enum 枚举名{<pre><code>    标识符[=整型常数],
    标识符[=整型常数],
    ...
    标识符[=整型常数]
} ;
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">enum Flag &#123;success=<span class="number">1</span>,error=<span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">let</span> s:Flag=Flag.success;</div><div class="line"><span class="built_in">console</span>.log(s);<span class="comment">//1</span></div><div class="line"></div><div class="line">enum Color &#123;blue,red,<span class="string">'orange'</span>&#125;;</div><div class="line"><span class="keyword">var</span> c:Color=Color.red;</div><div class="line"><span class="built_in">console</span>.log(c);   <span class="comment">//1  如果标识符没有赋值 它的值就是下标</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="任意类型（any）"><a href="#任意类型（any）" class="headerlink" title="任意类型（any）"></a>任意类型（any）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num:any=<span class="number">123</span>;</div><div class="line">    num=<span class="string">'str'</span>;</div><div class="line">    num=<span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">//任意类型的用处</span></div><div class="line"><span class="keyword">var</span> oBox:any=<span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</div><div class="line">    oBox.style.color=<span class="string">'red'</span>;</div></pre></td></tr></table></figure>
<h4 id="任意类型（any）-1"><a href="#任意类型（any）-1" class="headerlink" title="任意类型（any）"></a>任意类型（any）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num:any=<span class="number">123</span>;</div><div class="line">    num=<span class="string">'str'</span>;</div><div class="line">    num=<span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">//任意类型的用处</span></div><div class="line"><span class="keyword">var</span> oBox:any=<span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</div><div class="line">    oBox.style.color=<span class="string">'red'</span>;</div></pre></td></tr></table></figure>
<h4 id="null-和-undefined-其他（never类型）数据类型的子类型"><a href="#null-和-undefined-其他（never类型）数据类型的子类型" class="headerlink" title="null 和 undefined  其他（never类型）数据类型的子类型"></a>null 和 undefined  其他（never类型）数据类型的子类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num:number;</div><div class="line"><span class="built_in">console</span>.log(num)  <span class="comment">//输出：undefined   报错</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> num:<span class="literal">undefined</span>;</div><div class="line"><span class="built_in">console</span>.log(num)  <span class="comment">//输出：undefined  //正确</span></div><div class="line"></div><div class="line"><span class="comment">//一个元素可能是 number类型 可能是null 可能是undefined</span></div><div class="line"><span class="keyword">var</span> num:number | <span class="literal">null</span> | <span class="literal">undefined</span>;</div><div class="line">num=<span class="number">1234</span>;</div><div class="line"><span class="built_in">console</span>.log(num)</div></pre></td></tr></table></figure>
<h4 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h4><ul>
<li>typescript中的void表示没有任何类型，一般用于定义方法的时候方法没有返回值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//es5的定义方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'run'</span>)</div><div class="line">&#125;</div><div class="line">run();</div><div class="line"></div><div class="line"><span class="comment">//ts中定义方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'run'</span>)</div><div class="line">&#125;</div><div class="line">run();</div><div class="line">        </div><div class="line"><span class="comment">//错误写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">undefined</span></span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'run'</span>)</div><div class="line">&#125;</div><div class="line">run();</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h4><ul>
<li>是其他类型 （包括 null 和 undefined）的子类型，代表从不会出现的值。</li>
<li>这意味着声明never的变量只能被never类型所赋值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a:never;</div><div class="line">a=<span class="number">123</span>; <span class="comment">//错误的写法</span></div><div class="line"></div><div class="line">a=<span class="function">(<span class="params">(</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'错误'</span>);</div><div class="line">&#125;)()</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; typescript中为了使编写的代码更规范，更有利于维护，增加了类型校验，在typescript中主要给我们提供了以下数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布尔类型（boolean）&lt;/li&gt;
&lt;li&gt;数字类型（number）&lt;/li&gt;
&lt;li&gt;字符串类型(string)&lt;/li&gt;
&lt;li&gt;数组类型（array）&lt;/li&gt;
&lt;li&gt;元组类型（tuple）&lt;/li&gt;
&lt;li&gt;枚举类型（enum）&lt;/li&gt;
&lt;li&gt;任意类型（any）&lt;/li&gt;
&lt;li&gt;null 和 undefined&lt;/li&gt;
&lt;li&gt;void类型&lt;/li&gt;
&lt;li&gt;never类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TS" scheme="http://yoursite.com/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript介绍、安装、编译及开发工具配置</title>
    <link href="http://yoursite.com/2019/05/18/TypeScript%E4%BB%8B%E7%BB%8D%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%BC%96%E8%AF%91%E5%8F%8A%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/05/18/TypeScript介绍、安装、编译及开发工具配置/</id>
    <published>2019-05-17T16:00:00.000Z</published>
    <updated>2020-05-25T13:08:32.849Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>2018年TypeScript非常火，现在都2019年了。望其项背，努力跟上世界的脚步吧。</p>
</blockquote>
<a id="more"></a>
<h2 id="TypeScript-介绍"><a href="#TypeScript-介绍" class="headerlink" title="TypeScript 介绍"></a>TypeScript 介绍</h2><ul>
<li>TypeScript是由微软开发的一款开源编程语言。</li>
<li>typeScript是JavaScript的超集，遵循最新的ES5、ES6规范。TypeScript扩展了JavaScript的语法。</li>
<li>TypeScript更像后端Java、C#这样的面向对象语言，可以让js开发大型企业项目。</li>
<li>谷歌也在大力支持TypeScript的推广，谷歌的angular2.x+就是基于TypeScript语法。</li>
<li>最新的Vue、React也可以集成TypeScript语法。</li>
<li>Nodejs框架Nestjs、midway中就是TypeScript语法。<blockquote>
<p>TS、ES6、ES5关系如下图</p>
</blockquote>
</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/e0823b04ly1gf4zpiszs3j2058055t9h.jpg" alt="535114296f32a0f74761362fb69cfd9.png"></p>
<h2 id="Typescript-安装-编译"><a href="#Typescript-安装-编译" class="headerlink" title="Typescript 安装 编译"></a>Typescript 安装 编译</h2><ul>
<li><p>安装（在使用 npm 命令之前电脑必须得安装 nodejs）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install -g typescript</div><div class="line">或者</div><div class="line">cnpm install -g typescript</div><div class="line">或者</div><div class="line">yarn global add typescript</div></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tsc helloworld.ts</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注意：：如果电脑上面没有安装过 cnpm，请先安装 cnpm<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></div></pre></td></tr></table></figure></p>
<p>注意：如果电脑上面没有安装过 yarn 请先安装 yarn:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install -g yarn</div><div class="line">或者</div><div class="line">cnpm install -g yarn</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Vscode-设置自动编译-ts-文件"><a href="#Vscode-设置自动编译-ts-文件" class="headerlink" title="Vscode 设置自动编译.ts 文件"></a>Vscode 设置自动编译.ts 文件</h2><ul>
<li><p>创建 tsconfig.json 文件 tsc –init 生成配置文件</p>
<p> <img src="http://ww1.sinaimg.cn/large/e0823b04ly1gf4zz8it4cj207807dwgv.jpg" alt="61c923b8e251353c6af30cedab98c20.png"></p>
</li>
<li>老版本 vscode 点击: 任务-&gt;运行任务-&gt; tsc:监视-tsconfig.json 然后就可以自动生<br>成代码了</li>
<li>最新版本 vscode 点击: 终端-&gt;运行任务-&gt;typescript-&gt;tsc:监视-tsconfig.json 然后就<br>可以自动生成代码了</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/e0823b04ly1gf500pqikxj20fg06sq5a.jpg" alt="6efb9b64becc156f8bedeecf011838b.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2018年TypeScript非常火，现在都2019年了。望其项背，努力跟上世界的脚步吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="iframe" scheme="http://yoursite.com/tags/iframe/"/>
    
  </entry>
  
  <entry>
    <title>angular 基础思想</title>
    <link href="http://yoursite.com/2018/12/26/angular%20%E5%9F%BA%E7%A1%80%E6%80%9D%E6%83%B3/"/>
    <id>http://yoursite.com/2018/12/26/angular 基础思想/</id>
    <published>2018-12-25T16:00:00.000Z</published>
    <updated>2020-07-29T16:43:54.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="angular-官方"><a href="#angular-官方" class="headerlink" title="angular 官方"></a>angular 官方</h2><ul>
<li>ng 表示 AngularJS.</li>
<li>官方网站<ul>
<li><a href="https://angularjs.org" target="_blank" rel="external">angular官网</a> </li>
<li><a href="https://code.angularjs.org/" target="_blank" rel="external">源代码</a><a id="more"></a>  
</li>
</ul>
</li>
</ul>
<h2 id="angular-基础"><a href="#angular-基础" class="headerlink" title="angular 基础"></a>angular 基础</h2><ul>
<li><p>angular 是什么东西</p>
<ul>
<li><p>ng 是一个处理单页面应用程序的 框架. 它扩展了原有的 HTML , 使用标签模板指令等方法去实现动态的单页面应用程序.</p>
</li>
<li><p>要理解angular,就得先理解框架和库<br>库, 就是仓库, 是一堆按照功能分类的方法, 对象数据的集合. 其目的是将用户开发的代码简化方便.<br>框架, 框架是一种结构. 该结构规定了用户应该如何使用, 按照这个结构编写代码.</p>
</li>
<li><p>什么是单页面应用程序 single page application<br>所谓的单页面应用程序是整个页面站点, 无论是什么页面内容都是一个 HTML 文件, 在 HTML 文件的内部<br>操作数据的显示与变化. 所有数据改动不再使用刷新的方法, 而是利用 ajax 和 dom 操作在界面上进行调整.</p>
</li>
<li><p>ng 不推荐在代码中使用 DOM 操作. 因此一般在 ng 项目中很少使用 DOM 操作. </p>
</li>
</ul>
</li>
<li><p>ng 代码的背后是如何执行的</p>
<ul>
<li><p>ng 是一个完全遵循 MVC( MVVM ) 的框架. 那么提供了一个开发的模型<br>  凡是使用 ng 开发, 所有的处理都应该放在 ng-app 中, 也就是我们所说的模块中.<br>  只要有了模块, ng 这个框架会给我们创建很多的东西来完成数据的双向绑定( 同步 ).</p>
</li>
<li><p>在实际开发时候, 一般一个页面中会包含很多的功能, 在 ng 中每一个具体功能由 控制器 维护.<br>  在 ng 的代码中有一个属性 ng-controller, 该属性会提供一个具体的函数, 在函数中处理数据. </p>
</li>
<li><p>ng 的一般开发的代码结构就出现了</p>
<ul>
<li>页面中必须有 ng-app, 而且都会自己命名</li>
<li>页面中都会有 ng-controller, 因此使用 ng-controller 就有一个 $scope, 可以控制数据</li>
<li>页面的 ng-controller 中都有 ng-model, ng-model 书写数据就会是 $scope 的属性</li>
<li>代码中一定有一个 angular.module( ‘ng-app名字’, [] ) 来创建模块</li>
<li>使用 .controller( ‘控制器的名字’, 函数 ) 来定义控制器. 以便得到 $scope, 可以操作数据.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><ul>
<li><p>创建对象的方法很多, 常用的是 构造函数( 构造器, constructor ), 和工厂( factory )模式<br>  所以在代码中, 创建对象的函数, 常常称为工厂函数, 利用工厂函数创建对象的设计模式就是工厂模式<br>  Object.create(  )</p>
</li>
<li><p>依赖注入</p>
<ul>
<li>所谓的依赖就是指, 在实现某些功能的时候, 需要某些特定的对象.</li>
<li><p>所谓的注入, 就是需要某个对象的时候, 作为参数传入</p>
</li>
<li><p>因此依赖注入就是, 在需要使用某一个对象的时候, 利用参数传入即可</p>
</li>
</ul>
</li>
<li><p>依赖注入的实现原理<br>1&gt; ng 在运行的时候, 会跟我们创建很多对象<br>2&gt; 这些对象都是私有的</p>
</li>
<li><p>在 ng 中可以被注入的对象有两类, 一类是 provider, 一类是服务( services )</p>
</li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ol>
<li><p>如何定义模块<br> angular.module( ‘模块名’, [] )<br> 在一个 app 中可以定义多个模块, 定义多个模块的时候命名有讲究<br> 例如: 整个 ng-app 叫做 mainApp<br>  一个登陆的模块可以叫做 mainApp.login</p>
</li>
<li><p>如何获取模块<br> angular.module( ‘模块名’ );<br> 在 ng 中无论代码是否在闭包中, 凡是已经定义的模块, 都可以获取.</p>
</li>
<li><p>控制器<br> 语法:<br>module.controller( ‘控制器名’, [ ‘需要依赖注入的对象的名字’, …, function ( 依赖列表 ) {</p>
<p>} ] )<br> 简化写法<br> module.controller( ‘控制器名’, function ( 依赖名字列表 ) {</p>
<p> });</p>
<p> function ( $scope, $http ) { … }<br> =&gt;<br> [ ‘$scope’, ‘$http’, function ( $scope, $http ) { … } ] </p>
</li>
<li><p>问题<br> -&gt; 为什么函数内的参数可以随意取名字<br>   假设内部在调用这个数组的时候, 采用的是语法<br>run( [ ‘$scope’, ‘$http’, function ( $scope, $http ) { … } ] )<br>   假设 run 函数的定义为<br>function run( args ) {<br> …<br>}</p>
<p>   在 数组中 除了最后一个以外, 都是需要被注入的对象的名字<br>1&gt; 将名字全部取出</p>
<pre><code>var names = args.slice( 0, args.length - 1 )
</code></pre><p>2&gt; 利用名字在 ng 内部找寻 ( 创建 ) 对应的对象<br>3&gt; 获得到对象以后, 也是一个数组的形式</p>
<pre><code>var depObjs = names.map(function ( v, i ) {
  ... 在内部查找, 找到后返回
});
</code></pre><p>4&gt; 调用最终的那个函数</p>
<pre><code>  -&gt; 获得函数
    func = args[ args.length - 1 ];
  -&gt; 调用
    func.apply( ..., depObjs )

和正常的函数一样, 函数的参数只是在函数内部需要使用传入数据时所用的名字, 它只是被内部数据所依赖.
  function ( $scope ) { ... }
  =&gt;
  function ( scope ) { ... } 
</code></pre></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;angular-官方&quot;&gt;&lt;a href=&quot;#angular-官方&quot; class=&quot;headerlink&quot; title=&quot;angular 官方&quot;&gt;&lt;/a&gt;angular 官方&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ng 表示 AngularJS.&lt;/li&gt;
&lt;li&gt;官方网站&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://angularjs.org&quot;&gt;angular官网&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.angularjs.org/&quot;&gt;源代码&lt;/a&gt;
    
    </summary>
    
      <category term="angulat" scheme="http://yoursite.com/categories/angulat/"/>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>angular中$scope作用域</title>
    <link href="http://yoursite.com/2018/12/25/angular%E4%B8%AD%20$scope%20%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2018/12/25/angular中 $scope 作用域/</id>
    <published>2018-12-24T16:00:00.000Z</published>
    <updated>2020-07-29T16:44:04.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作用域对象"><a href="#作用域对象" class="headerlink" title="作用域对象"></a>作用域对象</h2><p>  就是 $scope</p>
<h3 id="什么时候创建-scope"><a href="#什么时候创建-scope" class="headerlink" title="什么时候创建 $scope ?"></a>什么时候创建 $scope ?</h3>  <a id="more"></a> 
<pre><code>在 ng 凡是有 控制器就有 $scope 存在.
在 ng 中还有一个特点, 就是懒加载, 也就是说无论是什么对象只有在使用的时候被创建.
</code></pre><h3 id="多个-scope-之间的-关系是什么"><a href="#多个-scope-之间的-关系是什么" class="headerlink" title="多个 $scope 之间的 关系是什么?"></a>多个 $scope 之间的 关系是什么?</h3><pre><code>在 ng 中 控制器可以分配作用域, 即凡是定义一个 控制器 就会创建 一个 $scope. 如果控制器有
嵌套( 在一个 控制器里定义另一个控制器 ), 那么内控制器的 $scope 原型继承自 外控制器的 $scope

对象 a 原型继承自 对象 b, 就是说 a 可以使用 b 中的方法, a 的 __proto__ 就是 b
Object.create( b ) -&gt; a
</code></pre><h3 id="在原型继承中-如果-父对象-与-子对象-同时具有同名的属性会怎样"><a href="#在原型继承中-如果-父对象-与-子对象-同时具有同名的属性会怎样" class="headerlink" title="在原型继承中 如果 父对象 与 子对象 同时具有同名的属性会怎样?"></a>在原型继承中 如果 父对象 与 子对象 同时具有同名的属性会怎样?</h3><p>  -&gt; 在 原型继承中 子对象可以继承访问 父对象的所有成员<br>    var base = { name: ‘jim’ };<br>    var sub = Object.create( base );<br>    console.log( sub.name );<br>  -&gt; 如果在原型继承中 修改或设置 子对象的属性, 相当于给当前对象增加了属性.<br>    sub.age = 19;<br>  -&gt; 如果修改或设置 子对象中 与 父对象同名的属性, 实际上父对象不变, 而是给子对象增加了对应的属性<br>    sub.name = ‘tom’;<br>    // 除非 sub.<strong>proto</strong>.name = ‘tom’</p>
<pre><code>根据属性搜索原则, 在利用子对象访问 name 属性的时候, 只操作子对象, 与父对象无关.

需要具备一个能力, 看 html 标签 绘制 scope 关系
</code></pre><h3 id="为什么一开始的代码中没有写-controller-也可以双向绑定"><a href="#为什么一开始的代码中没有写-controller-也可以双向绑定" class="headerlink" title="为什么一开始的代码中没有写 controller 也可以双向绑定?"></a>为什么一开始的代码中没有写 controller 也可以双向绑定?</h3><p>  -&gt; 在 ng 程序中, 一旦使用 了 ng-app 就表明该标签与其子标签被 ng 处理,实际上在背后, 凡是有了 ng-app 的背后都会被创建一个 $rootScope 的对象,它就是所有的 $scope 的祖宗, 所有的 $scope 都是直接或间接继承与 $rootScope 的</p>
<p>  -&gt; 凡是没有写 ng-controller 的 ng-model 都是 $rootScope 的属性</p>
<p>  -&gt; 这个 $rootScope 是程序一开始被创建的, 因此不是使用 controller 来访问,ng 的 module 有一个方法, 叫做 run(), 表示运行, 即 ng 程序一运行的时候就会执行该方法.<br>  -语法:<br>    module.run( [ ‘…’, function ( … ) { … } ] )</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;作用域对象&quot;&gt;&lt;a href=&quot;#作用域对象&quot; class=&quot;headerlink&quot; title=&quot;作用域对象&quot;&gt;&lt;/a&gt;作用域对象&lt;/h2&gt;&lt;p&gt;  就是 $scope&lt;/p&gt;
&lt;h3 id=&quot;什么时候创建-scope&quot;&gt;&lt;a href=&quot;#什么时候创建-scope&quot; class=&quot;headerlink&quot; title=&quot;什么时候创建 $scope ?&quot;&gt;&lt;/a&gt;什么时候创建 $scope ?&lt;/h3&gt;
    
    </summary>
    
      <category term="angulat" scheme="http://yoursite.com/categories/angulat/"/>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>MVC及MVVC 在Angular中的思想</title>
    <link href="http://yoursite.com/2018/12/23/MVC%20%E5%8F%8A%20MVVM%20%E6%80%9D%E6%83%B3/"/>
    <id>http://yoursite.com/2018/12/23/MVC 及 MVVM 思想/</id>
    <published>2018-12-22T16:00:00.000Z</published>
    <updated>2020-07-29T16:44:34.062Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MVC-的基本概念"><a href="#MVC-的基本概念" class="headerlink" title="MVC 的基本概念"></a>MVC 的基本概念</h3><ul>
<li>概念解释<ul>
<li>M Model, 模型, 数据</li>
<li>V View, 视图, 就是如何展示数据</li>
<li>C Controller, 控制器, 表上如何联系数据与展示. 可以认为是主要的代码逻辑区域.<a id="more"></a></li>
</ul>
</li>
<li>使用 MVC 的思想处理代码, 可以使得代码分工变得明确, 那么代码的组织方式可以根据不同分块进行单独处理,所以 在 ng 中, 提供了一个非常不同于以往的编程方法<ul>
<li>在 ng 中完全遵循 MVC 的思想, 将 html 当做展示数据的 View, 而 需要在 界面中展示的数据就是 modle.</li>
<li>在处理文本输入绑定的时候, 输入的文本内容就是数据. 所在凡是需要作为数据的标签可以利用 ng-model </li>
<li>给它取一个名字. 在有了名字以后, 代码的背后就会对应的创建一个 该名字的 Model 出来. 在数据发生变化的时候, 为了可以展示数据, 会自动的将数据展示到 界面中( 控制器 )</li>
</ul>
</li>
</ul>
<h3 id="ng弱化了控制器"><a href="#ng弱化了控制器" class="headerlink" title="ng弱化了控制器"></a>ng弱化了控制器</h3><ul>
<li>在 传统的 MVC 框架中, 控制器是联系 view 与 model 的桥梁, 一般书写代码都在控制器中. 在控制器里面调用使用视图与数据模型. 在 ng 中似乎弱化了控制器的功能.</li>
<li>在 MVC 的思想中有两个基本问题<br>  1&gt; 数据如何同步<br>  2&gt; 业务逻辑如何实现在 ng 中所谓控制器的功能实际上表现出来的只有 模块功能的管理作用.</li>
</ul>
<h3 id="ng是MVVM-框架"><a href="#ng是MVVM-框架" class="headerlink" title="ng是MVVM 框架"></a>ng是MVVM 框架</h3><ul>
<li><p>MVVM是Model-View-ViewModel的简写,MVVM（Model-View-ViewModel）框架的由来便是MVP（Model-View-Presenter）模式与WPF结合的应用方式时发展演变过来的一种新型架构框架。它立足于原有MVP框架并且把WPF的新特性糅合进去，以应对客户日益复杂的需求变化。</p>
</li>
<li><p>正因为, ng减少了控制器的作用, 但是引入了一个新的对象, 这个对象与界面中数据一一对应,并且支持数据的双向绑定. 这样的一个对象与 Model 还是有一定的区别. 这个对象称为ViewModel, 基于视图的数据模型.虽然因此弱化了 controller 的概念, 但是强化了 viewmodel 的功能. 因此有人称 ng 是 MVVM 框架.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MVC-的基本概念&quot;&gt;&lt;a href=&quot;#MVC-的基本概念&quot; class=&quot;headerlink&quot; title=&quot;MVC 的基本概念&quot;&gt;&lt;/a&gt;MVC 的基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;概念解释&lt;ul&gt;
&lt;li&gt;M Model, 模型, 数据&lt;/li&gt;
&lt;li&gt;V View, 视图, 就是如何展示数据&lt;/li&gt;
&lt;li&gt;C Controller, 控制器, 表上如何联系数据与展示. 可以认为是主要的代码逻辑区域.
    
    </summary>
    
      <category term="angulat" scheme="http://yoursite.com/categories/angulat/"/>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Iframe父子窗口元素获取、通信、跳转</title>
    <link href="http://yoursite.com/2018/08/20/Iframe%E7%88%B6%E5%AD%90%E7%AA%97%E5%8F%A3%E5%85%83%E7%B4%A0%E8%8E%B7%E5%8F%96%E3%80%81%E9%80%9A%E4%BF%A1%E3%80%81%E8%B7%B3%E8%BD%AC/"/>
    <id>http://yoursite.com/2018/08/20/Iframe父子窗口元素获取、通信、跳转/</id>
    <published>2018-08-19T16:00:00.000Z</published>
    <updated>2020-07-29T16:47:01.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>虽说当下前端三大框架如日中天，谁还用过时的iframe标签呐，除非那些不道德的钓鱼网站。但是，但是遇到系统升级，系统很大，中心功能繁杂，全面翻新工作量大，怎么办呢，iframe呗，换个马甲瞧瞧。可是iframe中毕竟是两个窗口，所以元素获取、通信、跳转这些和直接获取元素不同，特此来总结一下。</p>
</blockquote>
<a id="more"></a>
<h2 id="在父窗口中获取iframe中子元素"><a href="#在父窗口中获取iframe中子元素" class="headerlink" title="在父窗口中获取iframe中子元素"></a>在父窗口中获取iframe中子元素</h2><ul>
<li>列表项</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种</span></div><div class="line"><span class="keyword">var</span> text1 = <span class="built_in">window</span>.frames[<span class="string">"iframe的name值"</span>].document.getElementById(<span class="string">"iframe中元素的ID"</span>);</div><div class="line"><span class="comment">// 第二种</span></div><div class="line"><span class="keyword">var</span> text2 = <span class="built_in">document</span>.getElementById(<span class="string">"iframe的Id"</span>).contentWindow.document.getElementById(<span class="string">"iframe中元素的ID"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>jQuery<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种</span></div><div class="line"><span class="keyword">var</span> test1 = $(<span class="string">"#iframe的ID"</span>).find(<span class="string">"#iframe中的元素ID"</span>);</div><div class="line"><span class="comment">// 第二种</span></div><div class="line"><span class="keyword">var</span> test2 =  $(<span class="string">"#iframe中的元素ID"</span>,<span class="built_in">document</span>.frames(<span class="string">"frame的name"</span>).document);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="在子元素中获取父iframe窗口"><a href="#在子元素中获取父iframe窗口" class="headerlink" title="在子元素中获取父iframe窗口"></a>在子元素中获取父iframe窗口</h2><ul>
<li><p>js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种</span></div><div class="line"><span class="keyword">var</span> text =  parent.window.document.getElementById(<span class="string">"#iframe的ID"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>jQuery</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种</span></div><div class="line"><span class="keyword">var</span> test1 =$(<span class="string">'iframe的Id'</span>, parent.document);</div><div class="line"><span class="comment">// 第二种</span></div><div class="line"><span class="keyword">var</span> test2 = $(<span class="built_in">window</span>.parent).find(<span class="string">"iframe[id='xxx']"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="在父子窗口通信"><a href="#在父子窗口通信" class="headerlink" title="在父子窗口通信"></a>在父子窗口通信</h2><ul>
<li><p>方法调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">父页面调用子页面方法：FrameName.window.childMethod();</div><div class="line">子页面调用父页面方法：parent.window.parentMethod();</div></pre></td></tr></table></figure>
</li>
<li><p>变量调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">父页面调用子页面方法：FrameName.window.childValue();</div><div class="line">子页面调用父页面方法：parent.window.parentValue();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><ul>
<li><p>子页面中a链接固定跳转。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"跳转的路径"</span> target=<span class="string">"父窗口iframe的Name"</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>子页面中js跳转。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#iframe的Id"</span>, <span class="built_in">window</span>.parent.document)[<span class="number">0</span>].src = <span class="string">"要跳转的路径"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>多个父iframe窗口，顶级窗口跳转。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"iframe"</span>,top.parent.document)[<span class="number">0</span>].src= <span class="string">"要跳转的路径"</span>;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;虽说当下前端三大框架如日中天，谁还用过时的iframe标签呐，除非那些不道德的钓鱼网站。但是，但是遇到系统升级，系统很大，中心功能繁杂，全面翻新工作量大，怎么办呢，iframe呗，换个马甲瞧瞧。可是iframe中毕竟是两个窗口，所以元素获取、通信、跳转这些和直接获取元素不同，特此来总结一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="iframe" scheme="http://yoursite.com/tags/iframe/"/>
    
  </entry>
  
  <entry>
    <title>使用chart.js与echarts.js绘制图表</title>
    <link href="http://yoursite.com/2018/07/29/%E4%BD%BF%E7%94%A8chart.js%E4%B8%8Eecharts.js%E7%BB%98%E5%88%B6%E5%9B%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/07/29/使用chart.js与echarts.js绘制图表/</id>
    <published>2018-07-28T16:00:00.000Z</published>
    <updated>2020-07-29T16:47:45.848Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近在升级公司得lims-6.0版本，BOSS要求给门户页面添加一个柱状图与饼图，进入页面时柱状图与饼图能分别显示当前年份接收的各月份样本数量，点击柱状图时饼图能够显示当前月份接收的各种样本数量，要求使用echarts.js图标插件。正好前段时间使用chart.js在另一个项目中做过柱状图，今天就来总结一下两种图标插件的基本使用方法</strong><br><a id="more"></a> </p>
<h2 id="了解图表插件"><a href="#了解图表插件" class="headerlink" title="了解图表插件"></a>了解图表插件</h2><blockquote>
<p>要在前端页面中使用图标插件，首先就要对其有基本的了解，无论是chart.js还是echart.js都是基于H5新属性Canvas提供的API封装的插件，其基本原理也就是在画布上绘制坐标，定义相对于坐标的算法实现描点、连线、填充等操作。在HTML页面中开发者只需要添加一个Canvas标签即可，然后在js中获取Canvas元素，运用插件提供的方法绘制图标，所以在页面中我们看到的图表并不存在实际DOM元素，它只是相对于画布绘制的图形，点击右键可是能图片另存为的哦</p>
</blockquote>
<p>当然说这些对于我们务实的程序员并没有什么卵用，但是当boss给出需求和技术时能自信的说自己的见解，哼哼，技术大牛有没有。<br>言归正传，接下来我将分别介绍这两种图表插件的基本使用方法</p>
<h2 id="使用chart-js绘制柱状图与饼图"><a href="#使用chart-js绘制柱状图与饼图" class="headerlink" title="使用chart.js绘制柱状图与饼图"></a>使用chart.js绘制柱状图与饼图</h2><h3 id="下载并引入chart-js文件"><a href="#下载并引入chart-js文件" class="headerlink" title="下载并引入chart.js文件"></a>下载并引入chart.js文件</h3><ul>
<li>下载<br><a href="https://github.com/chartjs/Chart.js" target="_blank" rel="external">chart.js下载</a></li>
<li>引入chart.js文件<br>我们需要在页面中引入Chart.js文件。此图表插件在全局命名空间中定义了Chart变量。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"Chart.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建图表"><a href="#创建图表" class="headerlink" title="创建图表"></a>创建图表</h3><ul>
<li><p>HTML<br>无论哪种图表插件都是基于Canvas标签的，所以我们首先要在页面写一个Canvas标签，并定义需要绘制图形的高度和宽度。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=<span class="string">"myChart"</span> width=<span class="string">"400"</span> height=<span class="string">"400"</span>&gt;&lt;/canvas&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>JavaScript<br>具体操作都要在JS代码中编写。首先从html页面中获取我们需要的DOM节点，然后在这个DOM节点上调用 Canvas的-getContext(“2d”) 方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"myChart"</span>).getContext(<span class="string">"2d"</span>);</div><div class="line"><span class="keyword">var</span> myNewChart = <span class="keyword">new</span> Chart(ctx);</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"> - 当然我们也可以用JQuery</div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="keyword">var</span> ctx = $(<span class="string">"#myChart"</span>).get(<span class="number">0</span>).getContext(<span class="string">"2d"</span>);</div><div class="line"><span class="keyword">var</span> myNewChart = <span class="keyword">new</span> Chart(ctx);</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line">当我们完成了在指定的canvas上实例化Chart对象之后，Chart.js会自动针对retina屏幕做缩放。</div><div class="line"> </div><div class="line"> - js操作</div><div class="line">Chart对象设置完成后，我们就可以继续创建Chart.js中提供的具体类型的图表了。下面这个案例中，我们将展示如何绘制一幅柱状图和饼图。</div><div class="line">&gt; 使用chart.js在页面上展现柱状图，我们需要使用它提供的 Bar(data,options)这个API，此方法需要传入两个实参，当然在实际开发中数据是后台传入的，这里我们自定义一些数据，在实际开发中按照这个数据模式传值即可，下面我们分别展示 。</div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="comment">//柱状图数据</span></div><div class="line"><span class="keyword">var</span> barChartData = &#123;</div><div class="line">        <span class="comment">//X轴显示的数据</span></div><div class="line">		labels: [<span class="string">"类别一"</span>, <span class="string">"类别二"</span>, <span class="string">"类别三"</span>, <span class="string">"类别四"</span>, <span class="string">"类别五"</span>],</div><div class="line">		<span class="attr">datasets</span>: [&#123;</div><div class="line">				<span class="attr">label</span>: <span class="string">"繁殖"</span>, <span class="comment">//图例</span></div><div class="line">				fillColor: <span class="string">"rgba(210, 214, 222, 1)"</span>, <span class="comment">//填充色</span></div><div class="line">				strokeColor: <span class="string">"rgba(210, 214, 222, 1)"</span>, <span class="comment">//描边色</span></div><div class="line">				data: [<span class="number">68</span>, <span class="number">59</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">56</span>]  <span class="comment">//数据</span></div><div class="line">			&#125;,</div><div class="line">			&#123;</div><div class="line">				<span class="attr">label</span>: <span class="string">"出货"</span>,<span class="comment">//图例</span></div><div class="line">				fillColor: <span class="string">"rgba(60,141,188,0.9)"</span>, <span class="comment">//填充色</span></div><div class="line">				strokeColor: <span class="string">"rgba(60,141,188,0.8)"</span>, <span class="comment">//描边色</span></div><div class="line">				data: [<span class="number">28</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">19</span>, <span class="number">86</span>]  <span class="comment">//数据</span></div><div class="line">			&#125;</div><div class="line">		]</div><div class="line">	&#125;;</div><div class="line"><span class="comment">// 柱状图选项设置</span></div><div class="line"><span class="keyword">var</span> barChartOptions = &#123;</div><div class="line">		<span class="attr">scaleOverlay</span>: <span class="literal">false</span>, <span class="comment">// 网格线是否在数据线的上面</span></div><div class="line">		scaleOverride: <span class="literal">false</span>, <span class="comment">// 是否用硬编码重写y轴网格线</span></div><div class="line">		scaleSteps: <span class="literal">null</span>, <span class="comment">//y轴刻度的个数</span></div><div class="line">		scaleStepWidth: <span class="literal">null</span>, <span class="comment">//y轴每个刻度的宽度</span></div><div class="line">		scaleStartValue: <span class="literal">null</span>, <span class="comment">//y轴的起始值</span></div><div class="line">		scaleBeginAtZero: <span class="literal">true</span>,<span class="comment">// y轴标记是否从0开始</span></div><div class="line">		scaleShowGridLines: <span class="literal">true</span>,<span class="comment">// 是否显示网格线</span></div><div class="line">		scaleGridLineColor: <span class="string">"rgba(0,0,0,.05)"</span>,<span class="comment">// 网格线的颜色</span></div><div class="line">		scaleGridLineWidth: <span class="number">1</span>, <span class="comment">// 网格线的线宽</span></div><div class="line">		scaleShowHorizontalLines: <span class="literal">true</span>,<span class="comment">// 是否显示横向线</span></div><div class="line">		scaleShowVerticalLines: <span class="literal">true</span>,<span class="comment">// 是否显示竖向线</span></div><div class="line">		barShowStroke: <span class="literal">true</span>,<span class="comment">// 是否显示线</span></div><div class="line">		barStrokeWidth: <span class="number">2</span>, <span class="comment">// 线宽</span></div><div class="line">		barValueSpacing: <span class="number">20</span>,<span class="comment">// 柱状块与x值所形成的线之间的距离</span></div><div class="line">		barDatasetSpacing: <span class="number">1</span>,<span class="comment">// 在同一x值内的柱状块之间的间距</span></div><div class="line">		animation : <span class="literal">true</span>,<span class="comment">//是否有动画效果</span></div><div class="line">        animationSteps : <span class="number">60</span>,<span class="comment">//动画的步数</span></div><div class="line">        animationEasing : <span class="string">"easeOutQuart"</span>,<span class="comment">// 动画的效果</span></div><div class="line">		 <span class="comment">// 图例</span></div><div class="line">		legendTemplate: <span class="string">"&lt;ul class=\"&lt;%=name.toLowerCase()%&gt;-legend\"&gt;&lt;% for (var i=0; i&lt;datasets.length; i++)&#123;%&gt;&lt;li&gt;&lt;span style=\"background-color:&lt;%=datasets[i].fillColor%&gt;\"&gt;&lt;/span&gt;&lt;%if(datasets[i].label)&#123;%&gt;&lt;%=datasets[i].label%&gt;&lt;%&#125;%&gt;&lt;/li&gt;&lt;%&#125;%&gt;&lt;/ul&gt;"</span>,</div><div class="line">		<span class="comment">//Boolean - whether to make the chart responsive</span></div><div class="line">		responsive: <span class="literal">true</span>,</div><div class="line">		<span class="attr">maintainAspectRatio</span>: <span class="literal">true</span></div><div class="line">	&#125;;</div><div class="line">	</div><div class="line"><span class="comment">//开始绘制图形	</span></div><div class="line">myNewChart.Bar(barChartData, barChartOptions);</div></pre></td></tr></table></figure>
</li>
<li><p>图表展示<br><img src="http://ww1.sinaimg.cn/mw690/e0823b04ly1fi4a8m9wz0j20lj0cvwep.jpg" alt="chart.js 柱状图"></p>
</li>
<li><p>接下来我们再创建一个饼图</p>
<blockquote>
<p>使用chart.js在页面上展现饼图，我们需要使用它提供的 Pie(data,options)这个API，此方法可以传入两个实参，其实我们只传第一个参数就行了（除非你是处女座的程序员），当然在实际开发中数据是后台传入的，这里我们自定义一些数据，在实际开发中按照这个数据模式传值即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//饼图数据  （对于一个饼图,必须传递一个对象数组的值和颜色属性。value键的值应该是一个数字。chart.js会计算的相对比例。）</span></div><div class="line"><span class="keyword">var</span> pieChartData = [</div><div class="line">	&#123;</div><div class="line">		<span class="attr">value</span>: <span class="number">30</span>,</div><div class="line">		<span class="attr">color</span>:<span class="string">"#F38630"</span></div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		<span class="attr">value</span> : <span class="number">50</span>,</div><div class="line">		<span class="attr">color</span> : <span class="string">"#E0E4CC"</span></div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		<span class="attr">value</span> : <span class="number">100</span>,</div><div class="line">		<span class="attr">color</span> : <span class="string">"#69D2E7"</span></div><div class="line">	&#125;			</div><div class="line">];</div><div class="line">	</div><div class="line"><span class="comment">//开始绘制图形	</span></div><div class="line">myNewChart.Bar(barChartData, barChartOptions);</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>图表展示<br><img src="http://ww1.sinaimg.cn/mw690/e0823b04ly1fi4az9gjhzj20b40b40t2.jpg" alt="chart.js 饼图"></p>
</li>
</ul>
<h2 id="使用echarts-js绘制柱状图与饼图"><a href="#使用echarts-js绘制柱状图与饼图" class="headerlink" title="使用echarts.js绘制柱状图与饼图"></a>使用echarts.js绘制柱状图与饼图</h2><h3 id="下载并引入chart-js文件-1"><a href="#下载并引入chart-js文件-1" class="headerlink" title="下载并引入chart.js文件"></a>下载并引入chart.js文件</h3><ul>
<li>下载<br><a href="https://github.com/ecomfe/echartss" target="_blank" rel="external">echarts.js下载</a></li>
<li>引入chart.js文件<br>我们需要在页面中引入Chart.js文件。此图表插件在全局命名空间中定义了Chart变量。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"echarts.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建图表-1"><a href="#创建图表-1" class="headerlink" title="创建图表"></a>创建图表</h3><ul>
<li><p>HTML<br>Echarts图表插件也是基于Canvas标签的，但是不同于chart.js直接在页面中写canvas标签，而是我们需要在页面中写一个div盒子，并定义需要绘制图形的高度和宽度。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"main"</span> style=<span class="string">"height:400px;"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>JavaScript<br>具体操作都要在JS代码中编写。首先从html页面中获取我们定义的div标签，然后在这个DOM节点上调用 echarts.init()方法初始化，它会自动给div标签内添加一个canvas画布。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"> - js操作</div><div class="line">Echarts对象初始化完成后，我们就可以继续创建Echarts.js中提供的具体类型的图表了。下面这个案例中，我们也将展示如何绘制一幅柱状图和饼图。</div><div class="line">&gt; 使用chart.js在页面上展现柱状图，我们需要使用它提供的 setOption(option)这个API，此方法需要传入一个实参，在实际开发中数据是后台传入的，这里我们自定义一些数据，在实际开发中按照这个数据模式传值即可 。</div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="comment">//柱状图数据选项设置</span></div><div class="line">option = &#123;</div><div class="line">		<span class="attr">color</span>: [<span class="string">'#3398DB'</span>],</div><div class="line">		<span class="attr">title</span>: &#123;</div><div class="line">		    <span class="attr">text</span>: <span class="string">'订单数量'</span>,</div><div class="line">		    <span class="attr">x</span>: <span class="string">'center'</span>,</div><div class="line">		    <span class="attr">textStyle</span>: &#123;</div><div class="line">		        <span class="attr">fontSize</span>: <span class="number">15</span>,</div><div class="line">		        <span class="attr">fontWeight</span>: <span class="string">'normal'</span>,</div><div class="line">	    	    <span class="attr">color</span>: <span class="string">'#333'</span></div><div class="line">	    	&#125;</div><div class="line">    	&#125;,</div><div class="line">		<span class="attr">tooltip</span>: &#123;&#125;,</div><div class="line">		<span class="attr">legend</span>: &#123;</div><div class="line">			<span class="attr">data</span>: [<span class="string">'数量'</span>]</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">xAxis</span>: &#123;</div><div class="line">			<span class="attr">data</span>: [<span class="string">"02月"</span>, <span class="string">"03月"</span>, <span class="string">"04月"</span>, <span class="string">"05月"</span>, <span class="string">"06月"</span>, <span class="string">"07月"</span>]</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">yAxis</span>: &#123;&#125;,</div><div class="line">		<span class="attr">series</span>: [&#123;</div><div class="line">			<span class="comment">// 根据名字对应到相应的系列</span></div><div class="line">			name: <span class="string">'数量'</span>,</div><div class="line">			<span class="attr">type</span>: <span class="string">'bar'</span>,</div><div class="line">			<span class="attr">data</span>:  [<span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>]</div><div class="line">		&#125;]</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"><span class="comment">//开始绘制图形	</span></div><div class="line">myChart.setOption(option);</div></pre></td></tr></table></figure>
</li>
<li><p>图表展示</p>
</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/mw690/e0823b04ly1fi4c8i3p0hj20eb0cb0st.jpg" alt="Echarts.js 柱状图"></p>
<ul>
<li><p>接下来我们再创建一个饼图</p>
<blockquote>
<p>使用Echarts.js在页面上展现饼图，我们也是使用它提供的setOption(option)这个API，此方法需要传入一个实参，在实际开发中数据是后台传入的，这里我们自定义一些数据，在实际开发中按照这个数据模式传值即可 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//饼图数据选项设置  （对于饼图,必须传递在series的data中传入一个数组对象。value键的值应该是一个数字。Echarts.js会计算的相对比例。）</span></div><div class="line">		option = &#123;</div><div class="line">					<span class="attr">title</span>: &#123;</div><div class="line">						<span class="attr">text</span>: <span class="string">''</span>,</div><div class="line">						<span class="attr">x</span>: <span class="string">'center'</span>,</div><div class="line">						<span class="attr">textStyle</span>: &#123;</div><div class="line">							<span class="attr">fontSize</span>: <span class="number">15</span>,</div><div class="line">							<span class="attr">fontWeight</span>: <span class="string">'normal'</span>,</div><div class="line">							<span class="attr">color</span>: <span class="string">'#333'</span></div><div class="line">						&#125;</div><div class="line">					&#125;,</div><div class="line">					<span class="attr">tooltip</span>: &#123;</div><div class="line">						<span class="attr">trigger</span>: <span class="string">'item'</span>,</div><div class="line">						<span class="attr">formatter</span>: <span class="string">"&#123;b&#125;:&#123;c&#125;(&#123;d&#125;%)"</span></div><div class="line">					&#125;,</div><div class="line">					<span class="attr">series</span>: [&#123;</div><div class="line">						<span class="attr">name</span>: <span class="string">''</span>,</div><div class="line">						<span class="attr">type</span>: <span class="string">'pie'</span>,</div><div class="line">						<span class="attr">radius</span>: <span class="string">'55%'</span>,</div><div class="line">						<span class="attr">center</span>: [<span class="string">'50%'</span>, <span class="string">'60%'</span>],</div><div class="line">						<span class="attr">data</span>: [&#123;<span class="string">"value"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"55555"</span>&#125;,&#123;<span class="string">"value"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"88888"</span>&#125;,&#123;<span class="string">"value"</span>:<span class="number">4</span>,<span class="string">"name"</span>:<span class="string">"产品03"</span>&#125;,&#123;<span class="string">"value"</span>:<span class="number">9</span>,<span class="string">"name"</span>:<span class="string">"科技服务"</span>&#125;,&#123;<span class="string">"value"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"成人组织"</span>&#125;,&#123;<span class="string">"value"</span>:<span class="number">6</span>,<span class="string">"name"</span>:<span class="string">"医学健康"</span>&#125;],</div><div class="line">						<span class="attr">itemStyle</span>: &#123;</div><div class="line">							<span class="attr">normal</span>: &#123;</div><div class="line">								<span class="attr">label</span>: &#123;</div><div class="line">									<span class="attr">show</span>: <span class="literal">true</span>,</div><div class="line">									<span class="attr">formatter</span>: <span class="string">'&#123;b&#125;:&#123;c&#125;(&#123;d&#125;%)'</span></div><div class="line">								&#125;,</div><div class="line">								<span class="attr">labelLine</span>: &#123;</div><div class="line">									<span class="attr">show</span>: <span class="literal">true</span></div><div class="line">								&#125;</div><div class="line">							&#125;,</div><div class="line">							<span class="attr">emphasis</span>: &#123;</div><div class="line">								<span class="attr">shadowBlur</span>: <span class="number">10</span>,</div><div class="line">								<span class="attr">shadowOffsetX</span>: <span class="number">0</span>,</div><div class="line">								<span class="attr">shadowColor</span>: <span class="string">'rgba(0, 0, 0, 0.5)'</span></div><div class="line">							&#125;</div><div class="line">						&#125;</div><div class="line">					&#125;]</div><div class="line">				&#125;;</div><div class="line">	</div><div class="line"><span class="comment">//开始绘制图形	</span></div><div class="line">myChart.setOption(option);</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>图表展示<br><img src="http://ww1.sinaimg.cn/mw690/e0823b04ly1fi4cy9ga60j20bv09o3yu.jpg" alt="Echarts.js 饼图"></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>市场上有好多好多的图表统计插件，大体有以下几种</p>
</blockquote>
<ul>
<li>MSChart<br>这个是Visual Studio里的自带控件，使用比较简单，不过数据需要在后台绑定。</li>
<li>ichart.js<br>是一款基于HTML5的图形库。使用纯javascript语言, 利用HTML5的canvas标签绘制各式图形。 支持饼图、环形图、折线图、面积图、柱形图、条形图等。</li>
<li>Chart.js<br>也是一款基于HTML5的图形库和ichartjs整体类似,支持柱状图、饼图、曲线图、雷达图、蛛网图、级地图等。不过Chart.js的教程文档没有ichartjs的详细。不过感觉在对于移动的适配上感觉比ichartjs要好一点。</li>
<li>ECharts.js<br>这也是一款基于HTML5的图形库。图形的创建也比较简单，直接引用Javascript即可。这也是我最喜欢使用的，喜欢这个库的原因主要有三点。<ol>
<li>这个库是百度的项目，而且一直有更新，目前最新的是EChart 3；</li>
<li>这个库的项目文档比较详细，每个点都说明的比较清楚，而且是中文的，理解比较容易；</li>
<li>这个库有深度的交互式数据探索，而且图表的动画真的真的是很炫酷呐。</li>
</ol>
</li>
</ul>
<p><strong>最后附上chart.js与echart.js的中文文档，我这里只讲了柱状图与饼图的简单使用方法，如有其它图表需求，请移步官方文档</strong><br> <a href="http://www.bootcss.com/p/chart.js/docs/" target="_blank" rel="external">chart.js中文文档</a></p>
<p> <a href="http://echarts.baidu.com/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts" target="_blank" rel="external">Echarts.js中文文档</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;最近在升级公司得lims-6.0版本，BOSS要求给门户页面添加一个柱状图与饼图，进入页面时柱状图与饼图能分别显示当前年份接收的各月份样本数量，点击柱状图时饼图能够显示当前月份接收的各种样本数量，要求使用echarts.js图标插件。正好前段时间使用chart.js在另一个项目中做过柱状图，今天就来总结一下两种图标插件的基本使用方法&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="chartJs与echartsJs" scheme="http://yoursite.com/categories/chartJs%E4%B8%8EechartsJs/"/>
    
    
      <category term="图表插件" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%A1%A8%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Module</title>
    <link href="http://yoursite.com/2018/05/24/JavaScript%20%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://yoursite.com/2018/05/24/JavaScript 模块化/</id>
    <published>2018-05-23T16:00:00.000Z</published>
    <updated>2020-07-29T16:46:37.697Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Node 中可以使用 JavaScript<ul>
<li>在 Node 中，内置了两个 API：module.exports 和 require 这两个哥们儿</li>
<li>在 Node 中，一个 JavaScript 文件就是一个模块<ul>
<li>模块天生就是私有作用域<a id="more"></a></li>
</ul>
</li>
<li>Node 就是基于 CommonJS 规范实现了一套自己的模块化解决方案<ul>
<li>所谓的规范只是指定标准的人或者组织，不负责实现</li>
<li>一般这种所谓的规范都是先有的实现，慢慢的用的人多了，自然而然就形成一种标准</li>
</ul>
</li>
</ul>
</li>
<li><p>浏览器也可以使用 JavaScript</p>
<ul>
<li>浏览器中的 JavaScript 必须依赖于 html 页面中的 script 标签</li>
<li>JavaScript 有一个天大的缺陷：无法直接通过 js 语法本身去加载另一个 js 文件</li>
<li>对于大型项目来说，在一个页面通过 script 标签之间加载 n 多个 JavaScript 文件</li>
<li>以前写代码都习惯加上 匿名自执行函数</li>
<li>在浏览器环境，也有一个社区 RequireJS ，也为 JavaScript 语言在浏览器端实现了一套模块化解决方案<ul>
<li>例如如何定一个模块</li>
<li>以及模块与模块之间如何相互加载</li>
<li>以及模块如何暴露接口</li>
</ul>
</li>
<li>由于 Require 推广的很好，在社区中形成了一种标准，所以 RequireJS 社区给自己定义了一个模块规范名称：AMD</li>
<li>AMD：Asynchronous Module Definition  异步模块定义规范</li>
<li>国内阿里巴巴有一个牛人，不服 RequireJS，感觉用的不爽，所以做了一个叫 SeaJS，由于在国内推广的比较好，所以也给自己起了个名字：CMD：Common Module Definition</li>
<li>但是 SeaJS 已经不更新维护了</li>
<li>RequireJS 还在更新维护</li>
</ul>
</li>
<li><p>总结：</p>
<ul>
<li>无论是 CMD、AMD、CommonJS、UMD 什么什么 MD 模块系统</li>
<li>它们的本质初衷都是一样的，都是为了解决 JavaScript 历史问题：没有模块化系统</li>
<li>所以，在 2015 年 6 月，ES6正式发布了，其中就定义了 模块系统 规范</li>
<li>原生就提供了 import、export 等接口API用来作为自己官方的模块API规范</li>
<li>但是，这个模块系统由一个很大的问题，还没有任何环境能原生直接支持</li>
<li>必须通过一个叫：babel 的工具，编译转换才可以使用</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Node 中可以使用 JavaScript&lt;ul&gt;
&lt;li&gt;在 Node 中，内置了两个 API：module.exports 和 require 这两个哥们儿&lt;/li&gt;
&lt;li&gt;在 Node 中，一个 JavaScript 文件就是一个模块&lt;ul&gt;
&lt;li&gt;模块天生就是私有作用域
    
    </summary>
    
      <category term="NodeJs" scheme="http://yoursite.com/categories/NodeJs/"/>
    
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ES5数组新增Api</title>
    <link href="http://yoursite.com/2018/05/07/ES5-%E6%95%B0%E7%BB%84%E6%96%B0%E5%A2%9E%E7%9A%84%E5%87%A0%E4%B8%AAApi/"/>
    <id>http://yoursite.com/2018/05/07/ES5-数组新增的几个Api/</id>
    <published>2018-05-06T16:00:00.000Z</published>
    <updated>2020-07-29T16:47:30.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="forEach-callback-thisArg"><a href="#forEach-callback-thisArg" class="headerlink" title="forEach(callback[thisArg])"></a>forEach(callback[thisArg])</h2><ul>
<li>在ES5之前，我们可以通过for和for in 两种方式来遍历数组，而ES5引入了一个新方法forEach，使数组遍历更加简洁，forEach需要传递2个参数，第一个参数是回调函数，是必选参数，第二个参数是一个对象，用来改变callback中的this指向，是可选参数。<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,r</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(v,i,r);</div><div class="line">&#125;)</div><div class="line">-&gt;</div><div class="line">a <span class="number">0</span> [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</div><div class="line">b <span class="number">1</span> [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</div><div class="line">c <span class="number">2</span> [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>从输出的结果可以看出，callback中传入了3个参数v,i,r 分别表示当前元素、当前位置、数组对象.再看看使用 thisArg 的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">   <span class="attr">print</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(a,b);</div><div class="line">   &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,a</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.print(v,i);</div><div class="line">&#125;,obj);</div></pre></td></tr></table></figure>
<p>不传thisArgs时，callback中的 this 默认指向 window 对象，当传递thisArg时，callback中的this就指向了thisArg，因此这个参数的目的就是为了改变回调函数中的this指向。</p>
<ul>
<li>对于不支持ES5的浏览器，我们可以对forEach进行简单的扩展来兼容老的浏览器：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="built_in">Array</span>.prototype.forEach)&#123;</div><div class="line">    <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">callback,thisArg</span>)</span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</div><div class="line">            <span class="comment">//当thisArg为undefined时，JS引擎会将window作为其调用者</span></div><div class="line">            callback.call(thisArg,<span class="keyword">this</span>[i],i,<span class="keyword">this</span>.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="map-callback-thisArg"><a href="#map-callback-thisArg" class="headerlink" title="map(callback[,thisArg])"></a>map(callback[,thisArg])</h2><ul>
<li>map的作用是对原数组进行加工处理后并将其作为一个新数组返回，该方法同样接收两个参数，callback是回调函数用于对数组进行加工处理，thisArg和上面的一样。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [</div><div class="line">   &#123;<span class="attr">w</span>:<span class="number">10</span>,<span class="attr">h</span>:<span class="number">10</span>&#125;, <span class="comment">//定义长和宽</span></div><div class="line">   &#123;<span class="attr">w</span>:<span class="number">15</span>,<span class="attr">h</span>:<span class="number">20</span>&#125;,</div><div class="line">   &#123;<span class="attr">w</span>:<span class="number">12</span>,<span class="attr">h</span>:<span class="number">12</span>&#125;</div><div class="line">];</div><div class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">   <span class="comment">//根据长宽计算出面积并赋值给新属性area </span></div><div class="line">   item.area = item.w * item.h;</div><div class="line">   <span class="keyword">return</span> item;</div><div class="line">&#125;);</div><div class="line">newArr[<span class="number">0</span>] - &gt; &#123;<span class="attr">w</span>: <span class="number">10</span>, <span class="attr">h</span>: <span class="number">10</span>, <span class="attr">area</span>: <span class="number">100</span>&#125;</div></pre></td></tr></table></figure>
<p>可以看出，newArr返回的是增加了area属性的对象数组。这个方法非常实用，一般情况下，当一个ajax请求返回时，我们都要对其结果集进行过滤和校验等操作，这时map就派上用场了。我们再看看如果对map进行兼容性扩展：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="built_in">Array</span>.prototype.map) &#123;</div><div class="line">   <span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span> (<span class="params">callback, thisArg</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> temp = [];</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">           <span class="keyword">var</span> newItem = callback.call(thisArg,<span class="keyword">this</span>[i]);</div><div class="line">           temp.push(newItem); <span class="comment">//将callback返回的新元素压入temp中</span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> temp;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="filter-callback-thisArg"><a href="#filter-callback-thisArg" class="headerlink" title="filter(callback[thisArg])"></a>filter(callback[thisArg])</h2><ul>
<li>filter是<code>过滤</code>的意思，所以这个方法的作用就是返回一个匹配过滤条件的新数组，其接收两个参数callback和thisArg, callback也是回调函数，主要用于对元素进行条件匹配，thisArg和forEach中的thisArg作用一样，在这里就不重复了，看下面示例：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>];</div><div class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">     <span class="keyword">return</span> item === <span class="string">"a"</span>;</div><div class="line">&#125;);</div><div class="line">       </div><div class="line">newArr -&gt; [<span class="string">"a"</span>,<span class="string">"a"</span>]</div></pre></td></tr></table></figure>
<p>代码很简单，一看就明白，没有filter的时候，要实现这个功能，我们事先要创建一个空的数组，把匹配到的元素再push进去，现在就不需要那么麻烦了，我们再看看对filter的扩展：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="built_in">Array</span>.prototype.filter) &#123;</div><div class="line">    <span class="built_in">Array</span>.prototype.filter = <span class="function"><span class="keyword">function</span> (<span class="params">callback, thisArg</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> temp = [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">           <span class="keyword">if</span>(callback.call(thisArg,<span class="keyword">this</span>[i]))&#123;</div><div class="line">               <span class="comment">//如果callback返回true,则该元素符合过滤条件，将元素压入temp中</span></div><div class="line">               temp.push(<span class="keyword">this</span>[i]);</div><div class="line">           &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="some-callback-thisArg"><a href="#some-callback-thisArg" class="headerlink" title="some (callback[,thisArg])"></a>some (callback[,thisArg])</h2><ul>
<li>some是<code>某些、一些</code>的意思，因此，some的作用是检测数组中的每一个元素，当callback返回true时就停止遍历，并返回true，这样的描述似乎有些抽象，看代码：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> result = arr.some( <span class="function"><span class="keyword">function</span>(<span class="params"> item, index, array </span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( item, index, array);</div><div class="line">    <span class="keyword">return</span> item &gt; <span class="number">2</span>;</div><div class="line">&#125;);</div><div class="line">-&gt;</div><div class="line"> <span class="number">1</span> <span class="number">0</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"> <span class="number">2</span> <span class="number">1</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"> <span class="number">3</span> <span class="number">2</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line"> restule -&gt; <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>从运行结果看，some检测整个数组，只要当arr中有一个元素符合条件item&gt;2 就停止检测和遍历，并返回true，以表示检测到目标。这和我们在for循环中使用break语言的作用有点类似！ 下面对于some的扩展会有助于你对some的理解：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="built_in">Array</span>.prototype.some) &#123;</div><div class="line">   <span class="built_in">Array</span>.prototype.some = <span class="function"><span class="keyword">function</span> (<span class="params">callback, thisArg</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">           <span class="keyword">if</span>(callback.call(thisArg,<span class="keyword">this</span>[i],i,<span class="keyword">this</span>.toString()))&#123;</div><div class="line"></div><div class="line">               <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//检测到callback返回true,跳出循环，并返回true</span></div><div class="line">           &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//一个符合条件的都没有检测到，返回false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="every-callback-thisArg"><a href="#every-callback-thisArg" class="headerlink" title="every (callback[,thisArg])"></a>every (callback[,thisArg])</h2><ul>
<li>every是<code>每一个</code>的意思，相比some来讲，every对元素的检测更加严格，那every到底是干什么的呢，看代码：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> result = arr.every( <span class="function"><span class="keyword">function</span>(<span class="params"> item, index, array </span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( item, index, array );</div><div class="line">    <span class="keyword">return</span> item &lt; <span class="number">3</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"> <span class="number">1</span> <span class="number">0</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"> <span class="number">2</span> <span class="number">1</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"> <span class="number">3</span> <span class="number">2</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line"> result -&gt; <span class="literal">false</span></div></pre></td></tr></table></figure>
<p> 从运行结果看，当检测第3个元素时，item&lt;3为false, 停止检测，并返回false，这说明every在检测元素时，要求每一个元素都要符合条件item&lt;3，如果有一个不符合就停止检测，并返回false,(ps：你可以测试item&lt;5时的运行结果，返回值一定是true)。那every到底有什么用武之地呢？ 当一个for循环使用了break语句后，我们想知道for循环是否正常的执行完时， 我们一般会通过检测for中的索引i==arr.length来判断,因此every的作用就体现在这里。 我们再看看对于every方法的扩展：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="built_in">Array</span>.prototype.every) &#123;</div><div class="line">   <span class="built_in">Array</span>.prototype.every = <span class="function"><span class="keyword">function</span> (<span class="params">callback, thisArg</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">           <span class="keyword">if</span>(!callback.call(thisArg,<span class="keyword">this</span>[i],i,<span class="keyword">this</span>.toString()))&#123;</div><div class="line"></div><div class="line">               <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//检测到不符合条件的元素,跳出循环，并返回false</span></div><div class="line">           &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//所有元素都符合条件，返回true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="reduce-callback-initialValue"><a href="#reduce-callback-initialValue" class="headerlink" title="reduce(callback[initialValue])"></a>reduce(callback[initialValue])</h2><ul>
<li>官方解释:该方法应用一个函数对一个累加器和数组的每个值(从左到右)减少到一个单一值(什么玩意儿嘛)<br>*代码如下:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> newArr = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previousValue, currentValue, currentIndex, array</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(previousValue, currentValue,currentIndex);</div><div class="line">    <span class="keyword">return</span> previousValue + currentValue;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></div><div class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">2</span></div><div class="line"><span class="number">6</span> <span class="number">4</span> <span class="number">3</span></div><div class="line"></div><div class="line">newArr -&gt; <span class="number">10</span></div></pre></td></tr></table></figure>
<p>从运行结果可以看出，reduce实现了数组元素的累加功能，reduce接收4个参数，previousValue存放的是上一次callback返回的结果，currentValue是当前元素，currentIndex是当前元素位置，array是当前数组。</p>
<ul>
<li>previousValue 初始值为数组的第一个元素，数组从第2个元素开始遍历。我们再来看看initialValue 究竟是什么鬼：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> newArr = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previousValue, currentValue, currentIndex, array</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(previousValue, currentValue,currentIndex);</div><div class="line">    <span class="keyword">return</span> previousValue + currentValue;</div><div class="line">&#125;,<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="number">100</span> <span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="number">101</span> <span class="number">2</span> <span class="number">1</span></div><div class="line"><span class="number">103</span> <span class="number">3</span> <span class="number">2</span></div><div class="line"><span class="number">106</span> <span class="number">4</span> <span class="number">3</span></div><div class="line"></div><div class="line">newArr -&gt; <span class="number">110</span></div></pre></td></tr></table></figure>
<p>从运行结果看，initialValue参数指定了previousValue的初始值，更重要的是，这次数组是从第1个位置开始遍历，而不再是从第2个位置开始了。</p>
<h2 id="reduceRight-callback-initialValue"><a href="#reduceRight-callback-initialValue" class="headerlink" title="reduceRight (callback[,initialValue])"></a>reduceRight (callback[,initialValue])</h2><ul>
<li>和reduce的作用完全相同，唯一的不同是，reduceRight是从右至左遍历数组的元素。</li>
</ul>
<h2 id="indexOf-和-lastIndexOf"><a href="#indexOf-和-lastIndexOf" class="headerlink" title="indexOf##和## lastIndexOf"></a>indexOf##和## lastIndexOf</h2><ul>
<li>这两个方法和String类中indexOf和lastIndexOf作用类似</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;forEach-callback-thisArg&quot;&gt;&lt;a href=&quot;#forEach-callback-thisArg&quot; class=&quot;headerlink&quot; title=&quot;forEach(callback[thisArg])&quot;&gt;&lt;/a&gt;forEach(callback[thisArg])&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在ES5之前，我们可以通过for和for in 两种方式来遍历数组，而ES5引入了一个新方法forEach，使数组遍历更加简洁，forEach需要传递2个参数，第一个参数是回调函数，是必选参数，第二个参数是一个对象，用来改变callback中的this指向，是可选参数。
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>JS中 异常</title>
    <link href="http://yoursite.com/2018/03/24/Js%E4%B8%AD%E5%BC%82%E5%B8%B8%20exception%20/"/>
    <id>http://yoursite.com/2018/03/24/Js中异常 exception /</id>
    <published>2018-03-23T16:00:00.000Z</published>
    <updated>2020-07-29T16:46:48.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是异常？"><a href="#什么是异常？" class="headerlink" title="什么是异常？"></a>什么是异常？</h2><ol>
<li>程序执行是出现的结果与预期结果不一致.</li>
<li>运行时出现了错误<a id="more"></a>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li>要知道代码错在哪里，首先就要明白代码的执行顺序， 在 js 中程序的运行分成预解析与执行两个阶段<br>1&gt; 在预解析过程中出现的错误, 多半是 语法. 这一类错误是无法处理的.<br>2&gt; 只有在运行时出现的错误才可以被 try-catch</li>
</ul>
</li>
</ol>
<h2 id="找错喽"><a href="#找错喽" class="headerlink" title="找错喽"></a>找错喽</h2><ol>
<li><p>throw new Error( ‘错误的消息’ )<br>人为的抛出异常会阻止其后的代码执行. 和内置的异常逻辑是一模一样的.</p>
<p>异常的抛出顺序<br> func( ) -&gt; fun() -&gt; foo() -&gt; fn();<br>在 实际开发中 常常是 函数调用函数, 利用多层调用来实现具体 的内容<br>将调用的函数称为调用者, 而被调用的函数称为被调用者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function foo1() &#123;</div><div class="line">      console.log( &apos;foo1 Start &apos;);</div><div class="line">      foo2();</div><div class="line">      console.log( &apos;foo1 finish &apos;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  function foo2() &#123;</div><div class="line">      console.log( &apos;foo2 Start &apos;);</div><div class="line">      try &#123;</div><div class="line">          foo3();</div><div class="line">      &#125; catch ( e ) &#123;</div><div class="line"></div><div class="line">      &#125;</div><div class="line">      console.log( &apos;foo2 finish &apos;);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">   function foo3() &#123;</div><div class="line">      console.log( &apos;foo3 Start &apos;);</div><div class="line">      throw new Error( &apos;我是一个自定义异常&apos; );</div><div class="line"></div><div class="line">      console.log( &apos;foo3 finish &apos;);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  foo1();</div><div class="line">  console.log( &apos;over&apos; );</div></pre></td></tr></table></figure>
<p> 在异常发出的时候, 首先会在当前函数中寻找是否有 try-catch<br> 如果发现已经处理了异常 就没有任何影响. 如果没有出现 try-catch<br> 那么其后代码不在执行, 跳转到其调用函数, 检查是否出现 try-catch<br> 如果有, 则继续运行( 原函数中异常之后的代码, 还是不执行 )<br> 如果没有出现 try-catch, 则继续往上抛出. 直至全局范围, 若出现错误则爆红停止运行</p>
</li>
<li><p>什么时候使用 throw 抛出异常</p>
<ul>
<li>写一个函数是为了使用函数进行计算等运行. 因此需要输入数据, 而在实际开发中函数没有( 少用 )无效的函数.<ul>
<li>一般函数的返回值是需要用来做其他事情的. 那么为了保证函数可以正常返回数据. 因此可以利用一次判断限制函数传入的参数是否正确, 否则抛出异常, 让其后的代码不在执行.</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>例如: Person( name, age, gender )</p>
<p>  function Person ( name, age, gender ) {<br>  if ( typeof name == ‘string’ &amp;&amp; typeof age == ‘number’ &amp;&amp; typeof gender === ‘string’ ) {<br>              throw new Error( ‘…. 参数不正确’ );<br>           }<br>    // 其后的代码<br>  }</p>
<ul>
<li><p>系统定义的内置异常不够使用的时候</p>
<p>  在 js 中 try-catch 语法有 3 中( 知道即可 )<br>1&gt; try-catch</p>
<p>2&gt; try {</p>
<pre><code>} catch ( e ) {

} finally { // 永远会执行

}
</code></pre><p>3&gt; try {</p>
<pre><code>} finally {

}
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是异常？&quot;&gt;&lt;a href=&quot;#什么是异常？&quot; class=&quot;headerlink&quot; title=&quot;什么是异常？&quot;&gt;&lt;/a&gt;什么是异常？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;程序执行是出现的结果与预期结果不一致.&lt;/li&gt;
&lt;li&gt;运行时出现了错误
    
    </summary>
    
      <category term="NodeJs" scheme="http://yoursite.com/categories/NodeJs/"/>
    
    
      <category term="NodeJs" scheme="http://yoursite.com/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>对象的四种继承</title>
    <link href="http://yoursite.com/2017/12/24/%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2017/12/24/实现继承/</id>
    <published>2017-12-23T16:00:00.000Z</published>
    <updated>2020-07-29T16:47:58.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>我们都知道面向对象的三大特性：封装、继承、多态。</li>
</ul>
<ul>
<li>封装：将复杂的操作包裹起来，让简单的东西留在外面<ul>
<li>函数是对 具体过程的封装。</li>
<li>对象是对 行为和数据的封装。</li>
</ul>
</li>
<li>继承：子类可以使用从父类继承的属性和方法。<br>  *即：让某个类型的对象获得另一个类型的对象的属性的方法    </li>
<li>多态：把不同的子类对象都当作父类来看，可以屏蔽不同子类对象之间的差异，写出通用的代码，做出通用的编程，以适应需求的不断变化。 <a id="more"></a>
<blockquote>
<p>今天主要总结下继承的几种方式及代码</p>
</blockquote>
</li>
</ul>
<h3 id="经典继承-Object-create"><a href="#经典继承-Object-create" class="headerlink" title="经典继承 - Object.create"></a>经典继承 - Object.create</h3><ul>
<li>ES5提供的方法（IE9+ 开始支持）<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o1 = &#123; </div><div class="line">    <span class="attr">sayHi</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"hello，i am chuanchuan"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o2 = <span class="built_in">Object</span>.create(o1);</div><div class="line"></div><div class="line"><span class="comment">//实现兼容</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> create = <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> ( <span class="built_in">Object</span>.create ) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.create( obj );</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">        F.prototype = obj;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="原型继承-Object-prototype"><a href="#原型继承-Object-prototype" class="headerlink" title="原型继承- Object.prototype"></a>原型继承- Object.prototype</h3><ul>
<li>如果需要让一个对象拥有某些属性和方法，可以把这些属性和方法放到原型对象中，因为对象会继承自原型对象，所以就获得了该属性和方法<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="comment">// 将需要的属性添加到原型对象中</span></div><div class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="comment">//覆盖原型对象</span></div><div class="line">Person.prototype = &#123;</div><div class="line">	<span class="attr">constructor</span>: Person,</div><div class="line">    <span class="attr">sayHi</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    <span class="attr">sayNo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    <span class="attr">sayYouAgin</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div><div class="line">p.sayHi();</div><div class="line">p.sayNo();</div><div class="line">p.sayYouAgin();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="混入式继承-Object-extend"><a href="#混入式继承-Object-extend" class="headerlink" title="混入式继承- Object.extend"></a>混入式继承- Object.extend</h3><ul>
<li>由于一个对象可以继承自任意的对象，即：o可以继承自对象o1，o2，o3….</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var o1 = &#123;name:&quot;女娲&quot;, age: 1, gender: &quot;female&quot;&#125;;</div><div class="line">var o2 = &#123;grade: &quot;三年级二班&quot;, score: 100&#125;;</div><div class="line"></div><div class="line">// o2 继承 o1</div><div class="line">for ( var k in o1 ) &#123;</div><div class="line">  o2[k] = o1[k];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//如果希望 o2 可以继承自任意的对象. 所以为了简化继承的代码</div><div class="line">//给 o2 提供一个方法, 叫 extend</div><div class="line">o2.extend = function (obj) &#123;</div><div class="line">    for (var k in obj) &#123;</div><div class="line">        this[k] = obj[k];</div><div class="line">    &#125;   </div><div class="line">&#125;</div><div class="line"></div><div class="line">o2.extend(o1);  // 继承</div></pre></td></tr></table></figure>
<h3 id="对象冒充"><a href="#对象冒充" class="headerlink" title="对象冒充"></a>对象冒充</h3><ul>
<li>将parent作为child对象的一个方法来调用，然后卸磨杀驴。<pre><code class="js"><span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params">name, age</span>) </span>{
      <span class="keyword">this</span>.name = name;
      <span class="keyword">this</span>.age = age;
}
<span class="function"><span class="keyword">function</span> <span class="title">child</span>(<span class="params">name, age, gender, address</span>) </span>{
      <span class="comment">// 将parent作为child对象的一个方法来调用</span>
      <span class="keyword">this</span>.parent = parent;
      <span class="keyword">this</span>.parent(name, age);
          <span class="comment">// 卸磨杀驴</span>
      <span class="keyword">delete</span> <span class="keyword">this</span>.parent;
      <span class="keyword">this</span>.gender = gender;
      <span class="keyword">this</span>.address = address;
}
  <span class="keyword">var</span> ch = <span class="keyword">new</span> child(<span class="string">'tom'</span>, <span class="number">18</span>, <span class="string">'boy'</span>, <span class="string">'beijing'</span>);
  <span class="built_in">console</span>.log(ch);
</code></pre>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们都知道面向对象的三大特性：封装、继承、多态。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;封装：将复杂的操作包裹起来，让简单的东西留在外面&lt;ul&gt;
&lt;li&gt;函数是对 具体过程的封装。&lt;/li&gt;
&lt;li&gt;对象是对 行为和数据的封装。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;继承：子类可以使用从父类继承的属性和方法。&lt;br&gt;  *即：让某个类型的对象获得另一个类型的对象的属性的方法    &lt;/li&gt;
&lt;li&gt;多态：把不同的子类对象都当作父类来看，可以屏蔽不同子类对象之间的差异，写出通用的代码，做出通用的编程，以适应需求的不断变化。
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="高级面向对象" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BA%A7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Node js（基础）</title>
    <link href="http://yoursite.com/2017/12/20/Node%20JS%20%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/12/20/Node JS （基础）/</id>
    <published>2017-12-19T16:00:00.000Z</published>
    <updated>2020-07-29T16:43:30.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Node-js-介绍"><a href="#1-Node-js-介绍" class="headerlink" title="1. Node.js 介绍"></a>1. Node.js 介绍</h2><h3 id="1-1-网站开发模型（BS）"><a href="#1-1-网站开发模型（BS）" class="headerlink" title="1.1 网站开发模型（BS）"></a>1.1 网站开发模型（BS）</h3><ul>
<li>要认识NodeJs首先要知道了解网站开发模型，传统的网站开发模型就是BS模型，也就是浏览器服务器模型。</li>
<li><p>S（Server）：服务器端， 为客户端提交接口(数据)</p>
<a id="more"></a>
<ul>
<li>常用的服务器语言有：Java、.Net、Ruby、Python、PHP、Go、Swift、Lua<!--more--> </li>
<li>简单来说服务器就是处理客户端的请求，做出处理之后并响应回去。</li>
</ul>
</li>
<li><p>B（Browser）：客户端，简单说就是把一坨用户看不懂的数据变成友好的形式给用户体验</p>
</li>
</ul>
<h3 id="1-2-什么是-Node-js？"><a href="#1-2-什么是-Node-js？" class="headerlink" title="1.2 什么是 Node.js？"></a>1.2 什么是 Node.js？</h3><ul>
<li><p>简单的说呢<br>  Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境</p>
</li>
<li><p>复杂的说呢就是:<br>  V8引 擎执行Javascript的速度非常快，性能非常好，Node.js对一些特殊用例进行了优化，提供了替代的API，使得V8在非浏览器环境下运行得更好，也就是它对Google V8引擎进行了封装。</p>
</li>
<li><p>特点：<br>  Node.js 使用高效、轻量级的事件驱动、非阻塞 I/O 模型<br>  Node.js 的生态系统 npm 是目前最大的开源包管理系统<br>  Node.js 可跨平台 (Linux  windows  Unix)</p>
</li>
</ul>
<h3 id="1-3-使用-Node-可以做什么？"><a href="#1-3-使用-Node-可以做什么？" class="headerlink" title="1.3 使用 Node 可以做什么？"></a>1.3 使用 Node 可以做什么？</h3><ul>
<li>在几年的时间里，Node.JS逐渐发展成一个成熟的开发平台，吸引了许多开发者。有许多大型高流量网站都采用Node.JS进行开发，此外，开发人员还可以使用它来开发一些快速移动Web框架。除了Web应用外，NodeJS也被应用在许多方面，这些项目涉及到应用程序监控、媒体流、远程控制、桌面和移动应用等等。真的是很牛逼啊。</li>
</ul>
<h3 id="1-4-Node-发展史"><a href="#1-4-Node-发展史" class="headerlink" title="1.4 Node 发展史"></a>1.4 Node 发展史</h3><p>####饮水思源嘛，人家开发出来，我们后来人总得记着</p>
<ul>
<li>Node.js 由 Ryan Dahl 和一些其他的开发者于2009年在 Joyent 工作时发明</li>
<li>2009年2月，Ryan Dahl在博客上宣布准备基于V8创建一个轻量级的Web服务器并提供一套库。</li>
<li>2009 年，Angular 诞生了</li>
<li>2009年5月，Ryan Dahl在GitHub上发布了最初版本的部分Node.js包，随后几个月里，有人开始使用Node.js开发应用。</li>
<li>2009年11月和2010年4月，两届JSConf大会都安排了Node.js的讲座。</li>
<li>2010年年底，Node.js获得云计算服务商Joyent资助，创始人Ryan Dahl加入Joyent全职负责Node.js的发展。</li>
<li>2011年7月，Node.js在微软的支持下发布Windows版本。</li>
</ul>
<h3 id="1-5-资源推荐"><a href="#1-5-资源推荐" class="headerlink" title="1.5 资源推荐"></a>1.5 资源推荐</h3><ul>
<li>深入浅出 Node.js</li>
<li>CNODE</li>
<li><a href="https://cnodejs.org/getstart" target="_blank" rel="external">Nodejs 新手入门</a></li>
</ul>
<h2 id="2-Node-js-关于-HTTP-处理过程"><a href="#2-Node-js-关于-HTTP-处理过程" class="headerlink" title="2. Node.js 关于 HTTP 处理过程"></a>2. Node.js 关于 HTTP 处理过程</h2><h3 id="2-1-Node-的网络应用都需要先创建一个网络服务对象，通过-createServer-来实现。"><a href="#2-1-Node-的网络应用都需要先创建一个网络服务对象，通过-createServer-来实现。" class="headerlink" title="2.1 Node 的网络应用都需要先创建一个网络服务对象，通过 createServer 来实现。"></a>2.1 Node 的网络应用都需要先创建一个网络服务对象，通过 createServer 来实现。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">	var http = require(&apos;http&apos;);</div><div class="line">	var server = http.createServer(function(request, response) &#123;   </div><div class="line">	// handle your requset </div><div class="line">	&#125;);</div><div class="line">```	</div><div class="line">###	2.2 传入 createServer 的 function 在每次 HTTP 请求时都将被调用执行，因此这个 function 也被称为请求的处理者。事实上通过 createServer 返回的 Server 对象是一个 EventEmitter，我们需要做的仅仅是在这里保存这个 server 对象，并在之后对其添加监听器。</div><div class="line">```	</div><div class="line">var http = require(&apos;http&apos;);</div><div class="line">var server = http.createServer(); </div><div class="line">server.on(&apos;request&apos;, function(request, response) &#123;</div><div class="line">// handle your requset </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="2-3-当-HTTP-请求这个服务时，node-调用请求处理者-function-并传入一些用于处理事务相关的对象：request-和-response。我们可以非常方便的获得这两个对象。"><a href="#2-3-当-HTTP-请求这个服务时，node-调用请求处理者-function-并传入一些用于处理事务相关的对象：request-和-response。我们可以非常方便的获得这两个对象。" class="headerlink" title="2.3 当 HTTP 请求这个服务时，node 调用请求处理者 function 并传入一些用于处理事务相关的对象：request 和 response。我们可以非常方便的获得这两个对象。"></a>2.3 当 HTTP 请求这个服务时，node 调用请求处理者 function 并传入一些用于处理事务相关的对象：request 和 response。我们可以非常方便的获得这两个对象。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var http = require(&apos;http&apos;);</div><div class="line">var server = http.createServer(); </div><div class="line">server.on(&apos;request&apos;, function(request, response) &#123;</div><div class="line">// handle your requset </div><div class="line">&#125;).listen(8080);</div></pre></td></tr></table></figure>
<h3 id="2-4-为了对实际的请求提供服务，在-server-对象上需要调用-listen-方法。绝大多数情况你需要传入-listen-你想要服务监听的端口号，这里也存在很多其他的可选方案"><a href="#2-4-为了对实际的请求提供服务，在-server-对象上需要调用-listen-方法。绝大多数情况你需要传入-listen-你想要服务监听的端口号，这里也存在很多其他的可选方案" class="headerlink" title="2.4 为了对实际的请求提供服务，在 server 对象上需要调用 listen 方法。绝大多数情况你需要传入 listen 你想要服务监听的端口号，这里也存在很多其他的可选方案."></a>2.4 为了对实际的请求提供服务，在 server 对象上需要调用 listen 方法。绝大多数情况你需要传入 listen 你想要服务监听的端口号，这里也存在很多其他的可选方案.</h3><h2 id="3-Node中的-JavaScript"><a href="#3-Node中的-JavaScript" class="headerlink" title="3. Node中的 JavaScript"></a>3. Node中的 JavaScript</h2><ul>
<li><em>console</em></li>
<li><em>setInterval(callback, delay[, …args])</em></li>
<li><em>setTimeout(callback, delay[, …args])</em></li>
<li><em>clearInterval(intervalObject)</em></li>
<li><em>clearTimeout(timeoutObject)</em></li>
<li>clearImmediate(immediateObject)</li>
<li>setImmediate(callback[, …args])</li>
<li>__dirname</li>
<li>__filename</li>
<li>module</li>
<li>exports</li>
<li>global</li>
<li>process</li>
<li>require()</li>
</ul>
<h2 id="4-文件操作"><a href="#4-文件操作" class="headerlink" title="4.文件操作"></a>4.文件操作</h2><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><ul>
<li>path.basename(path[, ext])：获取文件名部分</li>
<li>path.dirname(path)：获取目录部分</li>
<li>path.extname(path)：获取扩展名部分</li>
<li>path.isAbsolute(path)：判断是否是绝对路径</li>
<li>path.join([…paths])：将多个路径拼接为一个路径</li>
</ul>
<h3 id="同步调用与异步调用"><a href="#同步调用与异步调用" class="headerlink" title="同步调用与异步调用"></a>同步调用与异步调用</h3><p>fs模块对文件的几乎所有操作都有同步和异步两种形式，例如：<code>readFile()</code> 和 <code>readFileSync()</code>。</p>
<p>同步与异步文件系统调用的区别</p>
<ul>
<li>同步调用立即执行，会阻塞后续代码继续执行，如果想要捕获异常需要使用 <code>try-catch</code></li>
<li>异步调用不会阻塞后续代码继续执行，需要回调函数作为额外的参数，通常包含一个错误作为回调函数的第一个参数</li>
<li>异步调用通过判断第一个err对象来处理异常</li>
<li>异步调用结果往往通过回调函数来进行获取</li>
</ul>
<p>Node 只在文件IO操作中，提供了同步调用和异步调用两种形式，两者可以结合使用，<br>但是推荐能使用异步调用解决问题的情况下，少用同步调用。</p>
<h3 id="文件操作常用API"><a href="#文件操作常用API" class="headerlink" title="文件操作常用API"></a>文件操作常用API</h3><ul>
<li>fs.writeFile(file, data, callback)：文件写入</li>
<li>fs.appendFile(file, data, callback)：文件追加</li>
<li>fs.readFile(file[, options], callback)：文件读取</li>
<li>fs.unlink(path, callback)：删除文件</li>
<li>fs.stat(path, callback)：获取文件信息</li>
<li>fs.access(path, callback)：验证文件路径是否存在</li>
<li>fs.rename(oldPath, newPath, callback)：重命名或移动文件</li>
</ul>
<h3 id="目录操作常用API"><a href="#目录操作常用API" class="headerlink" title="目录操作常用API"></a>目录操作常用API</h3><ul>
<li>fs.mkdir(path, callback)：创建一个目录</li>
<li>fs.rmdir(path, callback)：删除一个空目录</li>
<li>fs.readdir(path, callback)：读取一个目录</li>
<li>fs.rename(oldPath, newPath, callback)：重命名或移动目录</li>
</ul>
<h2 id="5-HTTP"><a href="#5-HTTP" class="headerlink" title="5. HTTP"></a>5. HTTP</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ul>
<li><p>Server</p>
<ul>
<li>http.createServer([requestListener])</li>
<li>Event: ‘request’</li>
<li>Event: ‘close’</li>
<li>Event: ‘connection’</li>
<li>server.close([callback])</li>
<li>server.listen([port][, hostname][, backlog][, callback])</li>
</ul>
</li>
<li><p>Request</p>
<ul>
<li>Event: ‘data’</li>
<li>Event: ‘close’</li>
<li>message.headers</li>
<li>message.httpVersion</li>
<li>message.method</li>
<li>message.url</li>
</ul>
</li>
<li><p>Response</p>
<ul>
<li>response.write(chunk[, encoding][, callback])</li>
<li>response.end([data][, encoding][, callback])</li>
<li>response.writeHead(statusCode[, statusMessage][, headers])</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Node-js-介绍&quot;&gt;&lt;a href=&quot;#1-Node-js-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. Node.js 介绍&quot;&gt;&lt;/a&gt;1. Node.js 介绍&lt;/h2&gt;&lt;h3 id=&quot;1-1-网站开发模型（BS）&quot;&gt;&lt;a href=&quot;#1-1-网站开发模型（BS）&quot; class=&quot;headerlink&quot; title=&quot;1.1 网站开发模型（BS）&quot;&gt;&lt;/a&gt;1.1 网站开发模型（BS）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;要认识NodeJs首先要知道了解网站开发模型，传统的网站开发模型就是BS模型，也就是浏览器服务器模型。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S（Server）：服务器端， 为客户端提交接口(数据)&lt;/p&gt;
    
    </summary>
    
      <category term="NodeJs" scheme="http://yoursite.com/categories/NodeJs/"/>
    
    
      <category term="NodeJs" scheme="http://yoursite.com/tags/NodeJs/"/>
    
  </entry>
  
</feed>
